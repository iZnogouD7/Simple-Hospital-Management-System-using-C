<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Database Future Enhancement Recommendations</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #2c3e50;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 40px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: shimmer 6s ease-in-out infinite;
        }

        @keyframes shimmer {
            0%, 100% { transform: rotate(0deg); }
            50% { transform: rotate(180deg); }
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            position: relative;
            z-index: 2;
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
            position: relative;
            z-index: 2;
        }

        .content {
            padding: 40px;
        }

        .section {
            margin-bottom: 50px;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
            border-left: 5px solid #3498db;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .section:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.12);
        }

        .section h2 {
            color: #2c3e50;
            font-size: 1.8em;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .section-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #3498db, #2980b9);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2em;
        }

        .code-block {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            font-family: 'Courier New', monospace;
            overflow-x: auto;
            position: relative;
        }

        .code-block::before {
            content: 'SQL';
            position: absolute;
            top: 10px;
            right: 15px;
            background: #3498db;
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.8em;
        }

        .code-line {
            display: flex;
            margin-bottom: 5px;
        }

        .line-number {
            color: #6c757d;
            margin-right: 15px;
            min-width: 20px;
            text-align: right;
            user-select: none;
        }

        .code-content {
            color: #2c3e50;
        }

        .sql-keyword {
            color: #0066cc;
            font-weight: bold;
        }

        .sql-function {
            color: #cc6600;
        }

        .sql-string {
            color: #009900;
        }

        .sql-comment {
            color: #808080;
            font-style: italic;
        }

        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin-top: 25px;
        }

        .feature-card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 25px;
            border-radius: 12px;
            border-left: 4px solid #e74c3c;
            transition: all 0.3s ease;
        }

        .feature-card:hover {
            background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .feature-card h3 {
            color: #e74c3c;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .feature-card ul {
            list-style: none;
            padding-left: 0;
        }

        .feature-card li {
            padding: 8px 0;
            padding-left: 25px;
            position: relative;
            color: #555;
        }

        .feature-card li::before {
            content: '▶';
            position: absolute;
            left: 0;
            color: #e74c3c;
            font-size: 0.8em;
        }

        .tools-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 25px;
        }

        .tool-item {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
            border-top: 3px solid #9b59b6;
            transition: all 0.3s ease;
        }

        .tool-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .tool-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #9b59b6, #8e44ad);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
            color: white;
            font-size: 1.5em;
        }

        .highlight-box {
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            border: 1px solid #ffecb5;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            position: relative;
        }

        .highlight-box::before {
            content: '💡';
            position: absolute;
            top: -10px;
            left: 20px;
            background: #f39c12;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 1.2em;
        }

        .highlight-box h4 {
            color: #d68910;
            margin-bottom: 10px;
            margin-left: 30px;
        }

        .progress-indicator {
            display: flex;
            justify-content: space-between;
            margin: 30px 0;
            padding: 0 20px;
        }

        .progress-step {
            flex: 1;
            text-align: center;
            position: relative;
        }

        .progress-step::after {
            content: '';
            position: absolute;
            top: 15px;
            left: 60%;
            width: 80%;
            height: 2px;
            background: #bdc3c7;
            z-index: 1;
        }

        .progress-step:last-child::after {
            display: none;
        }

        .step-circle {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: #3498db;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            font-weight: bold;
            z-index: 2;
            position: relative;
        }

        .step-text {
            font-size: 0.9em;
            color: #555;
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 2em;
            }
            
            .content {
                padding: 20px;
            }
            
            .section {
                padding: 20px;
            }
            
            .feature-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 Future Enhancement Recommendations</h1>
            <p>Advanced Database Optimization Strategies for Peak Performance</p>
        </div>

        <div class="content">
            <!-- Section 10.1: Advanced Indexing Strategies -->
            <div class="section">
                <h2>
                    <div class="section-icon">📊</div>
                    10.1 Advanced Indexing Strategies
                </h2>
                
                <div class="highlight-box">
                    <h4>Function-Based Indexes</h4>
                    <p>Optimize complex queries with specialized indexing techniques that go beyond standard column indexes.</p>
                </div>

                <h3>Listing 12: Advanced Index Recommendations</h3>
                <div class="code-block">
                    <div class="code-line">
                        <span class="line-number">1</span>
                        <span class="code-content"><span class="sql-comment">-- For case-insensitive searches</span></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">2</span>
                        <span class="code-content"><span class="sql-keyword">CREATE INDEX</span> IDX_PATIENT_NAME_UPPER <span class="sql-keyword">ON</span> PATIENTS (<span class="sql-function">UPPER</span>(NAME));</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">3</span>
                        <span class="code-content"></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">4</span>
                        <span class="code-content"><span class="sql-comment">-- For date-based queries</span></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">5</span>
                        <span class="code-content"><span class="sql-keyword">CREATE INDEX</span> IDX_PATIENT_AGE <span class="sql-keyword">ON</span> PATIENTS (<span class="sql-function">MONTHS_BETWEEN</span>(SYSDATE, DOB));</span>
                    </div>
                </div>
            </div>

            <!-- Section 10.2: Query Optimization Opportunities -->
            <div class="section">
                <h2>
                    <div class="section-icon">⚡</div>
                    10.2 Query Optimization Opportunities
                </h2>

                <div class="feature-grid">
                    <div class="feature-card">
                        <h3>Parallel Processing</h3>
                        <ul>
                            <li>Enable parallel query execution for large analytical queries</li>
                            <li>Implement parallel DML for bulk operations</li>
                            <li>Configure optimal degree of parallelism based on system resources</li>
                        </ul>
                    </div>

                    <div class="feature-card">
                        <h3>Query Result Caching</h3>
                        <ul>
                            <li>Implement result caching for frequently executed reports</li>
                            <li>Use PL/SQL packages with package-level caching</li>
                            <li>Consider Oracle's query result cache functionality</li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Section 10.3: Advanced Partitioning -->
            <div class="section">
                <h2>
                    <div class="section-icon">🔧</div>
                    10.3 Advanced Partitioning
                </h2>

                <div class="highlight-box">
                    <h4>Sub-partitioning Strategy</h4>
                    <p>Combine multiple partitioning methods for maximum query performance and data distribution efficiency.</p>
                </div>

                <h3>Listing 13: Advanced Partitioning Strategy</h3>
                <div class="code-block">
                    <div class="code-line">
                        <span class="line-number">1</span>
                        <span class="code-content"><span class="sql-comment">-- Hash sub-partitioning by Patient_ID within date partitions</span></span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">2</span>
                        <span class="code-content"><span class="sql-keyword">PARTITION BY RANGE</span> (Test_Date)</span>
                    </div>
                    <div class="code-line">
                        <span class="line-number">3</span>
                        <span class="code-content"><span class="sql-keyword">SUBPARTITION BY HASH</span> (Patient_ID) <span class="sql-keyword">SUBPARTITIONS</span> 4</span>
                    </div>
                </div>
            </div>

            <!-- Section 10.4: Performance Monitoring -->
            <div class="section">
                <h2>
                    <div class="section-icon">📈</div>
                    10.4 Performance Monitoring
                </h2>

                <div class="highlight-box">
                    <h4>Recommended Tools and Techniques</h4>
                    <p>Comprehensive monitoring strategy for maintaining optimal database performance and identifying bottlenecks.</p>
                </div>

                <div class="tools-grid">
                    <div class="tool-item">
                        <div class="tool-icon">📊</div>
                        <h4>AWR Reports</h4>
                        <p>Implement Automatic Workload Repository reports for comprehensive performance analysis</p>
                    </div>

                    <div class="tool-item">
                        <div class="tool-icon">🔍</div>
                        <h4>SQL Performance Monitoring</h4>
                        <p>Set up real-time SQL performance monitoring and alerting systems</p>
                    </div>

                    <div class="tool-item">
                        <div class="tool-icon">📋</div>
                        <h4>Custom Dashboards</h4>
                        <p>Create custom performance dashboards for key metrics visualization</p>
                    </div>

                    <div class="tool-item">
                        <div class="tool-icon">📏</div>
                        <h4>Baseline Metrics</h4>
                        <p>Establish baseline metrics and performance thresholds for proactive monitoring</p>
                    </div>
                </div>

                <div class="progress-indicator">
                    <div class="progress-step">
                        <div class="step-circle">1</div>
                        <div class="step-text">Setup AWR</div>
                    </div>
                    <div class="progress-step">
                        <div class="step-circle">2</div>
                        <div class="step-text">Configure Monitoring</div>
                    </div>
                    <div class="progress-step">
                        <div class="step-circle">3</div>
                        <div class="step-text">Create Dashboards</div>
                    </div>
                    <div class="progress-step">
                        <div class="step-circle">4</div>
                        <div class="step-text">Establish Baselines</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>







<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Materialized View & Trigger Concepts</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .content {
            padding: 40px;
        }
        
        .concept-section {
            margin-bottom: 60px;
        }
        
        .section-title {
            font-size: 2rem;
            color: #2c3e50;
            margin-bottom: 30px;
            text-align: center;
            position: relative;
        }
        
        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 3px;
            background: linear-gradient(135deg, #3498db, #2c3e50);
            border-radius: 2px;
        }
        
        /* Materialized View Diagram */
        .mv-diagram {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 30px;
            margin: 30px 0;
            position: relative;
        }
        
        .table-container {
            display: flex;
            justify-content: space-around;
            align-items: center;
            margin-bottom: 40px;
            flex-wrap: wrap;
            gap: 20px;
        }
        
        .table {
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            padding: 20px;
            min-width: 200px;
            text-align: center;
            position: relative;
        }
        
        .table h3 {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
            font-size: 1rem;
        }
        
        .table-rows {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .row {
            background: #ecf0f1;
            padding: 8px 12px;
            border-radius: 5px;
            font-size: 0.9rem;
            border-left: 3px solid #3498db;
        }
        
        .arrow {
            font-size: 2rem;
            color: #3498db;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 0.7; }
            50% { transform: scale(1.1); opacity: 1; }
        }
        
        .materialized-view {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            color: white;
        }
        
        .materialized-view h3 {
            background: rgba(0,0,0,0.2);
        }
        
        .join-process {
            background: #fff3cd;
            border: 2px dashed #f39c12;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
        }
        
        .join-process h4 {
            color: #d68910;
            margin-bottom: 10px;
        }
        
        /* Trigger Diagram */
        .trigger-diagram {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 30px;
            margin: 30px 0;
        }
        
        .trigger-flow {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }
        
        .trigger-step {
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            padding: 25px;
            text-align: center;
            flex: 1;
            min-width: 200px;
            position: relative;
        }
        
        .step-number {
            background: linear-gradient(135deg, #9b59b6, #8e44ad);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
            font-weight: bold;
            font-size: 1.2rem;
        }
        
        .step-title {
            font-size: 1.1rem;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .step-desc {
            font-size: 0.9rem;
            color: #7f8c8d;
            line-height: 1.4;
        }
        
        .concept-box {
            background: linear-gradient(135deg, #74b9ff, #0984e3);
            color: white;
            border-radius: 15px;
            padding: 25px;
            margin: 25px 0;
        }
        
        .concept-box h3 {
            font-size: 1.3rem;
            margin-bottom: 15px;
        }
        
        .concept-list {
            list-style: none;
            padding-left: 0;
        }
        
        .concept-list li {
            padding: 8px 0;
            padding-left: 25px;
            position: relative;
        }
        
        .concept-list li::before {
            content: '✓';
            position: absolute;
            left: 0;
            color: #00b894;
            font-weight: bold;
        }
        
        .comparison-table {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin: 30px 0;
        }
        
        .comparison-table table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .comparison-table th {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
        }
        
        .comparison-table td {
            padding: 15px;
            border-bottom: 1px solid #ecf0f1;
        }
        
        .comparison-table tr:nth-child(even) {
            background: #f8f9fa;
        }
        
        .highlight {
            background: linear-gradient(135deg, #ffeaa7, #fdcb6e);
            padding: 3px 8px;
            border-radius: 5px;
            font-weight: 600;
        }
        
        .warning-box {
            background: #fff5f5;
            border-left: 4px solid #e53e3e;
            padding: 20px;
            border-radius: 0 10px 10px 0;
            margin: 20px 0;
        }
        
        .warning-box h4 {
            color: #c53030;
            margin-bottom: 10px;
        }
        
        .success-box {
            background: #f0fff4;
            border-left: 4px solid #38a169;
            padding: 20px;
            border-radius: 0 10px 10px 0;
            margin: 20px 0;
        }
        
        .success-box h4 {
            color: #2f855a;
            margin-bottom: 10px;
        }
        
        @media (max-width: 768px) {
            .table-container, .trigger-flow {
                flex-direction: column;
            }
            
            .arrow {
                transform: rotate(90deg);
                margin: 10px 0;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .section-title {
                font-size: 1.5rem;
            }
            
            .content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Database Concepts: Complete Visual Guide</h1>
            <p>Visual Guide to Understanding Materialized Views, Triggers, Stored Procedures & Functions</p>
        </div>
        
        <div class="content">
            <!-- Materialized Views Section -->
            <section class="concept-section">
                <h2 class="section-title">Materialized Views</h2>
                
                <div class="concept-box">
                    <h3>What is a Materialized View?</h3>
                    <p>A <strong>Materialized View</strong> is a pre-computed table that stores the results of a complex query. Unlike regular views (which are virtual), materialized views physically store data on disk, providing faster access to complex aggregated data.</p>
                </div>
                
                <div class="mv-diagram">
                    <h3 style="text-align: center; margin-bottom: 30px; color: #2c3e50;">Materialized View Creation Process</h3>
                    
                    <div class="table-container">
                        <div class="table">
                            <h3>Patients Table</h3>
                            <div class="table-rows">
                                <div class="row">ID | Name | DOB</div>
                                <div class="row">1 | John | 1985</div>
                                <div class="row">2 | Jane | 1990</div>
                                <div class="row">3 | Bob | 1975</div>
                            </div>
                        </div>
                        
                        <div class="arrow">+</div>
                        
                        <div class="table">
                            <h3>Visits Table</h3>
                            <div class="table-rows">
                                <div class="row">ID | Patient_ID | Date</div>
                                <div class="row">101 | 1 | 2024-01</div>
                                <div class="row">102 | 1 | 2024-03</div>
                                <div class="row">103 | 2 | 2024-02</div>
                            </div>
                        </div>
                        
                        <div class="arrow">+</div>
                        
                        <div class="table">
                            <h3>Lab_Results Table</h3>
                            <div class="table-rows">
                                <div class="row">ID | Visit_ID | Test</div>
                                <div class="row">201 | 101 | Blood</div>
                                <div class="row">202 | 102 | X-Ray</div>
                                <div class="row">203 | 103 | MRI</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="join-process">
                        <h4>Complex JOIN + AGGREGATION Query</h4>
                        <p>SELECT p.Name, COUNT(v.Visit_ID), MAX(v.Visit_Date), AGE_CALC(p.DOB)<br>
                        FROM Patients p JOIN Visits v JOIN Lab_Results l<br>
                        GROUP BY p.Patient_ID, p.Name, p.DOB</p>
                    </div>
                    
                    <div style="text-align: center; margin: 20px 0;">
                        <div class="arrow" style="transform: rotate(90deg);">⬇</div>
                    </div>
                    
                    <div class="table materialized-view" style="margin: 0 auto; max-width: 400px;">
                        <h3>Patient_History_Snapshot (Materialized View)</h3>
                        <div class="table-rows">
                            <div class="row">Name | Total_Visits | Last_Visit | Age</div>
                            <div class="row">John | 2 | 2024-03-15 | 39</div>
                            <div class="row">Jane | 1 | 2024-02-10 | 34</div>
                            <div class="row">Bob | 0 | NULL | 49</div>
                        </div>
                    </div>
                </div>
                
                <div class="success-box">
                    <h4>Key Benefits:</h4>
                    <ul class="concept-list">
                        <li><span class="highlight">Faster Query Performance</span> - Pre-computed results eliminate expensive JOINs</li>
                        <li><span class="highlight">Reduced CPU Load</span> - No need to recalculate complex aggregations</li>
                        <li><span class="highlight">Better Concurrency</span> - Multiple users can access pre-computed data</li>
                        <li><span class="highlight">Optimized Reporting</span> - Perfect for dashboards and analytics</li>
                    </ul>
                </div>
                
                <div class="warning-box">
                    <h4>Trade-offs to Consider:</h4>
                    <ul>
                        <li><strong>Storage Overhead:</strong> Requires additional disk space</li>
                        <li><strong>Refresh Cost:</strong> Must be updated when underlying data changes</li>
                        <li><strong>Data Staleness:</strong> May not reflect real-time changes</li>
                    </ul>
                </div>
            </section>
            
            <!-- Triggers Section -->
            <section class="concept-section">
                <h2 class="section-title">Database Triggers</h2>
                
                <div class="concept-box">
                    <h3>What is a Database Trigger?</h3>
                    <p>A <strong>Database Trigger</strong> is a special stored procedure that automatically executes (or "fires") in response to specific database events like INSERT, UPDATE, or DELETE operations. Triggers run automatically without being explicitly called.</p>
                </div>
                
                <div class="trigger-diagram">
                    <h3 style="text-align: center; margin-bottom: 30px; color: #2c3e50;">Trigger Execution Flow</h3>
                    
                    <div class="trigger-flow">
                        <div class="trigger-step">
                            <div class="step-number">1</div>
                            <div class="step-title">Data Operation</div>
                            <div class="step-desc">User attempts to INSERT, UPDATE, or DELETE data in a table</div>
                        </div>
                        
                        <div class="arrow">→</div>
                        
                        <div class="trigger-step">
                            <div class="step-number">2</div>
                            <div class="step-title">Trigger Fires</div>
                            <div class="step-desc">Database automatically detects the operation and executes the trigger</div>
                        </div>
                        
                        <div class="arrow">→</div>
                        
                        <div class="trigger-step">
                            <div class="step-number">3</div>
                            <div class="step-title">Validation Logic</div>
                            <div class="step-desc">Trigger performs business rules validation or data transformation</div>
                        </div>
                        
                        <div class="arrow">→</div>
                        
                        <div class="trigger-step">
                            <div class="step-number">4</div>
                            <div class="step-title">Proceed or Block</div>
                            <div class="step-desc">Operation continues if valid, or gets blocked with error message</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 40px; background: #fff3cd; padding: 20px; border-radius: 10px; border: 2px dashed #f39c12;">
                        <h4 style="color: #d68910; text-align: center; margin-bottom: 15px;">EHR System Example: Allergy Duplicate Prevention</h4>
                        <div style="background: white; padding: 15px; border-radius: 8px; font-family: monospace; font-size: 0.9rem;">
                            <strong>BEFORE INSERT ON Allergies</strong><br>
                            → Check if similar allergen exists for patient<br>
                            → If duplicate found: RAISE_APPLICATION_ERROR<br>
                            → If unique: Allow insertion to proceed
                        </div>
                    </div>
                </div>
                
                <div class="comparison-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Trigger Type</th>
                                <th>When it Fires</th>
                                <th>Use Case Example</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>BEFORE INSERT</strong></td>
                                <td>Before new record is added</td>
                                <td>Validate data, prevent duplicates, auto-generate IDs</td>
                            </tr>
                            <tr>
                                <td><strong>AFTER INSERT</strong></td>
                                <td>After new record is added</td>
                                <td>Log activity, update related tables, send notifications</td>
                            </tr>
                            <tr>
                                <td><strong>BEFORE UPDATE</strong></td>
                                <td>Before existing record is modified</td>
                                <td>Audit changes, validate business rules</td>
                            </tr>
                            <tr>
                                <td><strong>AFTER UPDATE</strong></td>
                                <td>After existing record is modified</td>
                                <td>Refresh materialized views, sync related data</td>
                            </tr>
                            <tr>
                                <td><strong>BEFORE DELETE</strong></td>
                                <td>Before record is removed</td>
                                <td>Check referential integrity, prevent critical data loss</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div class="success-box">
                    <h4>Advantages of Database Triggers:</h4>
                    <ul class="concept-list">
                        <li><span class="highlight">Automatic Execution</span> - No need to remember to call them</li>
                        <li><span class="highlight">Data Consistency</span> - Enforces business rules at database level</li>
                        <li><span class="highlight">Centralized Logic</span> - Business rules in one place, not scattered in applications</li>
                        <li><span class="highlight">Security</span> - Cannot be bypassed by applications</li>
                    </ul>
                </div>
                
                <div class="warning-box">
                    <h4>Potential Drawbacks:</h4>
                    <ul>
                        <li><strong>Performance Impact:</strong> Adds overhead to DML operations</li>
                        <li><strong>Debugging Difficulty:</strong> Hidden logic that's hard to trace</li>
                        <li><strong>Cascade Effects:</strong> One trigger can fire other triggers</li>
                        <li><strong>Portability:</strong> Database-specific syntax</li>
                    </ul>
                </div>
            </section>
            
            <!-- Stored Procedures Section -->
            <section class="concept-section">
                <h2 class="section-title">Stored Procedures</h2>
                
                <div class="concept-box">
                    <h3>What is a Stored Procedure?</h3>
                    <p>A <strong>Stored Procedure</strong> is a precompiled collection of SQL statements and procedural logic stored in the database. It accepts parameters, performs operations (INSERT, UPDATE, DELETE), and can return status codes but not direct values like tables or datasets.</p>
                </div>
                
                <div class="trigger-diagram">
                    <h3 style="text-align: center; margin-bottom: 30px; color: #2c3e50;">Stored Procedure Execution Flow</h3>
                    
                    <div class="trigger-flow">
                        <div class="trigger-step">
                            <div class="step-number">1</div>
                            <div class="step-title">Application Call</div>
                            <div class="step-desc">Application calls procedure with input parameters</div>
                        </div>
                        
                        <div class="arrow">→</div>
                        
                        <div class="trigger-step">
                            <div class="step-number">2</div>
                            <div class="step-title">Parameter Validation</div>
                            <div class="step-desc">Procedure validates input parameters and business rules</div>
                        </div>
                        
                        <div class="arrow">→</div>
                        
                        <div class="trigger-step">
                            <div class="step-number">3</div>
                            <div class="step-title">Execute Logic</div>
                            <div class="step-desc">Performs DML operations, calculations, and data processing</div>
                        </div>
                        
                        <div class="arrow">→</div>
                        
                        <div class="trigger-step">
                            <div class="step-number">4</div>
                            <div class="step-title">Return Status</div>
                            <div class="step-desc">Returns success/error status and output parameters</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 40px; background: #e8f5e8; padding: 20px; border-radius: 10px; border: 2px dashed #27ae60;">
                        <h4 style="color: #27ae60; text-align: center; margin-bottom: 15px;">EHR System Example: Add_Lab_Result Procedure</h4>
                        <div style="background: white; padding: 15px; border-radius: 8px; font-family: monospace; font-size: 0.9rem;">
                            <strong>PROCEDURE Add_Lab_Result(</strong><br>
                            &nbsp;&nbsp;p_Visit_ID IN NUMBER,<br>
                            &nbsp;&nbsp;p_Test_Name IN VARCHAR2,<br>
                            &nbsp;&nbsp;p_Result_Value IN NUMBER<br>
                            <strong>)</strong><br>
                            → Validates visit exists<br>
                            → Inserts lab result<br>
                            → Handles exceptions<br>
                            → Returns success/error status
                        </div>
                    </div>
                </div>
                
                <div class="success-box">
                    <h4>Advantages of Stored Procedures:</h4>
                    <ul class="concept-list">
                        <li><span class="highlight">Performance</span> - Precompiled and cached execution plans</li>
                        <li><span class="highlight">Security</span> - Controlled data access and SQL injection prevention</li>
                        <li><span class="highlight">Centralized Logic</span> - Business rules in database layer</li>
                        <li><span class="highlight">Network Efficiency</span> - Reduced data transfer between app and DB</li>
                        <li><span class="highlight">Transaction Control</span> - Built-in transaction management</li>
                    </ul>
                </div>
                
                <div class="warning-box">
                    <h4>Considerations:</h4>
                    <ul>
                        <li><strong>No Direct Return Values:</strong> Cannot return result sets directly in Oracle</li>
                        <li><strong>Database Coupling:</strong> Ties business logic to specific database</li>
                        <li><strong>Version Control:</strong> Harder to manage in source control systems</li>
                    </ul>
                </div>
            </section>
            
            <!-- Functions Section -->
            <section class="concept-section">
                <h2 class="section-title">Database Functions</h2>
                
                <div class="concept-box">
                    <h3>What is a Database Function?</h3>
                    <p>A <strong>Database Function</strong> is a stored program that accepts parameters, performs calculations or data retrieval, and <em>must return a single value</em>. Functions can be used in SQL statements (SELECT, WHERE clauses) and are designed for data retrieval and computation.</p>
                </div>
                
                <div class="mv-diagram">
                    <h3 style="text-align: center; margin-bottom: 30px; color: #2c3e50;">Function Usage in SQL Queries</h3>
                    
                    <div style="background: #fff3cd; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                        <h4 style="color: #d68910; margin-bottom: 15px;">Function Definition Example:</h4>
                        <div style="background: white; padding: 15px; border-radius: 8px; font-family: monospace; font-size: 0.9rem;">
                            <strong>FUNCTION Calculate_Age(p_DOB DATE) RETURN NUMBER</strong><br>
                            AS<br>
                            BEGIN<br>
                            &nbsp;&nbsp;RETURN FLOOR(MONTHS_BETWEEN(SYSDATE, p_DOB)/12);<br>
                            END;
                        </div>
                    </div>
                    
                    <div class="table-container">
                        <div class="table">
                            <h3>Original Query</h3>
                            <div class="table-rows">
                                <div class="row" style="font-family: monospace; text-align: left; font-size: 0.8rem;">
                                    SELECT Patient_ID,<br>
                                    &nbsp;&nbsp;Name,<br>
                                    &nbsp;&nbsp;DOB,<br>
                                    &nbsp;&nbsp;FLOOR(MONTHS_BETWEEN(<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;SYSDATE, DOB)/12) AS Age<br>
                                    FROM Patients;
                                </div>
                            </div>
                        </div>
                        
                        <div class="arrow">→</div>
                        
                        <div class="table materialized-view">
                            <h3>Using Function</h3>
                            <div class="table-rows">
                                <div class="row" style="font-family: monospace; text-align: left; font-size: 0.8rem;">
                                    SELECT Patient_ID,<br>
                                    &nbsp;&nbsp;Name,<br>
                                    &nbsp;&nbsp;DOB,<br>
                                    &nbsp;&nbsp;Calculate_Age(DOB) AS Age<br>
                                    FROM Patients;
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div style="text-align: center; margin: 20px 0;">
                        <div class="concept-box" style="max-width: 600px; margin: 0 auto;">
                            <h4>Result Set</h4>
                            <div style="background: rgba(255,255,255,0.2); padding: 15px; border-radius: 8px; font-family: monospace;">
                                Patient_ID | Name | DOB | Age<br>
                                1 | John Smith | 1985-05-15 | 39<br>
                                2 | Jane Doe | 1990-08-22 | 34<br>
                                3 | Bob Wilson | 1975-12-03 | 49
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="comparison-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Function Type</th>
                                <th>Purpose</th>
                                <th>EHR Example</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>Scalar Functions</strong></td>
                                <td>Return single value for each input</td>
                                <td>Calculate_Age(DOB), Format_Phone(phone_number)</td>
                            </tr>
                            <tr>
                                <td><strong>Aggregate Functions</strong></td>
                                <td>Return single value from multiple rows</td>
                                <td>Get_Average_Test_Result(patient_id, test_name)</td>
                            </tr>
                            <tr>
                                <td><strong>Table Functions</strong></td>
                                <td>Return result set (table of values)</td>
                                <td>Get_Patient_Medications(patient_id, date_range)</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div class="success-box">
                    <h4>Advantages of Database Functions:</h4>
                    <ul class="concept-list">
                        <li><span class="highlight">Reusability</span> - Can be used in any SQL statement</li>
                        <li><span class="highlight">Modularity</span> - Encapsulates complex calculations</li>
                        <li><span class="highlight">Performance</span> - Executes close to data, reduces network traffic</li>
                        <li><span class="highlight">Consistency</span> - Same calculation logic everywhere</li>
                        <li><span class="highlight">SQL Integration</span> - Can be used in SELECT, WHERE, ORDER BY clauses</li>
                    </ul>
                </div>
                
                <div class="warning-box">
                    <h4>Function Limitations:</h4>
                    <ul>
                        <li><strong>Must Return Value:</strong> Cannot perform operations without returning something</li>
                        <li><strong>No DML in Pure Functions:</strong> Cannot modify data if used in SQL statements</li>
                        <li><strong>Performance Impact:</strong> Row-by-row execution can be slow for large datasets</li>
                    </ul>
                </div>
            </section>
            
            <!-- Summary Comparison -->
            <section class="concept-section">
                <h2 class="section-title">Complete Comparison Summary</h2>
                
                <div class="comparison-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Aspect</th>
                                <th>Materialized Views</th>
                                <th>Triggers</th>
                                <th>Stored Procedures</th>
                                <th>Functions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>Primary Purpose</strong></td>
                                <td>Pre-computed query results for performance</td>
                                <td>Automatic business rule enforcement</td>
                                <td>Execute complex business operations</td>
                                <td>Perform calculations and return values</td>
                            </tr>
                            <tr>
                                <td><strong>Execution Method</strong></td>
                                <td>Queried like a table</td>
                                <td>Automatic (event-driven)</td>
                                <td>Explicitly called by application</td>
                                <td>Called in SQL statements</td>
                            </tr>
                            <tr>
                                <td><strong>Return Value</strong></td>
                                <td>Result set (like table)</td>
                                <td>None (affects data directly)</td>
                                <td>Status code or output parameters</td>
                                <td>Must return single value or result set</td>
                            </tr>
                            <tr>
                                <td><strong>Data Modification</strong></td>
                                <td>No (read-only)</td>
                                <td>Yes (can block/modify operations)</td>
                                <td>Yes (INSERT/UPDATE/DELETE allowed)</td>
                                <td>Limited (not in pure functions)</td>
                            </tr>
                            <tr>
                                <td><strong>SQL Usage</strong></td>
                                <td>Used in FROM clause</td>
                                <td>Cannot be called directly</td>
                                <td>Called via EXEC or CALL</td>
                                <td>Used in SELECT, WHERE, ORDER BY</td>
                            </tr>
                            <tr>
                                <td><strong>Performance Impact</strong></td>
                                <td>Fast reads, slow writes</td>
                                <td>Overhead on DML operations</td>
                                <td>Efficient for complex operations</td>
                                <td>Good for calculations, slow for large datasets</td>
                            </tr>
                            <tr>
                                <td><strong>Best Used For</strong></td>
                                <td>Reporting, dashboards, analytics</td>
                                <td>Data validation, audit logging</td>
                                <td>Complex business processes, batch operations</td>
                                <td>Calculations, data transformations</td>
                            </tr>
                            <tr>
                                <td><strong>EHR Example</strong></td>
                                <td>Patient_History_Snapshot</td>
                                <td>Prevent_Duplicate_Allergy</td>
                                <td>Add_Lab_Result</td>
                                <td>Calculate_Age, Format_Phone</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 30px 0;">
                    <div class="concept-box" style="background: linear-gradient(135deg, #74b9ff, #0984e3);">
                        <h4>When to Use Materialized Views</h4>
                        <ul class="concept-list">
                            <li>Heavy reporting workloads</li>
                            <li>Complex JOIN operations</li>
                            <li>Data warehouse scenarios</li>
                            <li>Dashboard applications</li>
                        </ul>
                    </div>
                    
                    <div class="concept-box" style="background: linear-gradient(135deg, #fd79a8, #e84393);">
                        <h4>When to Use Triggers</h4>
                        <ul class="concept-list">
                            <li>Automatic data validation</li>
                            <li>Audit trail generation</li>
                            <li>Business rule enforcement</li>
                            <li>Data synchronization</li>
                        </ul>
                    </div>
                    
                    <div class="concept-box" style="background: linear-gradient(135deg, #fdcb6e, #e17055);">
                        <h4>When to Use Procedures</h4>
                        <ul class="concept-list">
                            <li>Complex business operations</li>
                            <li>Batch data processing</li>
                            <li>Multi-step transactions</li>
                            <li>Application APIs</li>
                        </ul>
                    </div>
                    
                    <div class="concept-box" style="background: linear-gradient(135deg, #00b894, #00a085);">
                        <h4>When to Use Functions</h4>
                        <ul class="concept-list">
                            <li>Reusable calculations</li>
                            <li>Data formatting</li>
                            <li>Complex WHERE conditions</li>
                            <li>Computed columns</li>
                        </ul>
                    </div>
                </div>
            </section>
        </div>
    </div>
</body>
</html>


 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Materialized View & Trigger Concepts</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .content {
            padding: 40px;
        }
        
        .concept-section {
            margin-bottom: 60px;
        }
        
        .section-title {
            font-size: 2rem;
            color: #2c3e50;
            margin-bottom: 30px;
            text-align: center;
            position: relative;
        }
        
        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 3px;
            background: linear-gradient(135deg, #3498db, #2c3e50);
            border-radius: 2px;
        }
        
        /* Materialized View Diagram */
        .mv-diagram {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 30px;
            margin: 30px 0;
            position: relative;
        }
        
        .table-container {
            display: flex;
            justify-content: space-around;
            align-items: center;
            margin-bottom: 40px;
            flex-wrap: wrap;
            gap: 20px;
        }
        
        .table {
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            padding: 20px;
            min-width: 200px;
            text-align: center;
            position: relative;
        }
        
        .table h3 {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
            font-size: 1rem;
        }
        
        .table-rows {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .row {
            background: #ecf0f1;
            padding: 8px 12px;
            border-radius: 5px;
            font-size: 0.9rem;
            border-left: 3px solid #3498db;
        }
        
        .arrow {
            font-size: 2rem;
            color: #3498db;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 0.7; }
            50% { transform: scale(1.1); opacity: 1; }
        }
        
        .materialized-view {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            color: white;
        }
        
        .materialized-view h3 {
            background: rgba(0,0,0,0.2);
        }
        
        .join-process {
            background: #fff3cd;
            border: 2px dashed #f39c12;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
        }
        
        .join-process h4 {
            color: #d68910;
            margin-bottom: 10px;
        }
        
        /* Trigger Diagram */
        .trigger-diagram {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 30px;
            margin: 30px 0;
        }
        
        .trigger-flow {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }
        
        .trigger-step {
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            padding: 25px;
            text-align: center;
            flex: 1;
            min-width: 200px;
            position: relative;
        }
        
        .step-number {
            background: linear-gradient(135deg, #9b59b6, #8e44ad);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
            font-weight: bold;
            font-size: 1.2rem;
        }
        
        .step-title {
            font-size: 1.1rem;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .step-desc {
            font-size: 0.9rem;
            color: #7f8c8d;
            line-height: 1.4;
        }
        
        .concept-box {
            background: linear-gradient(135deg, #74b9ff, #0984e3);
            color: white;
            border-radius: 15px;
            padding: 25px;
            margin: 25px 0;
        }
        
        .concept-box h3 {
            font-size: 1.3rem;
            margin-bottom: 15px;
        }
        
        .concept-list {
            list-style: none;
            padding-left: 0;
        }
        
        .concept-list li {
            padding: 8px 0;
            padding-left: 25px;
            position: relative;
        }
        
        .concept-list li::before {
            content: '✓';
            position: absolute;
            left: 0;
            color: #00b894;
            font-weight: bold;
        }
        
        .comparison-table {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin: 30px 0;
        }
        
        .comparison-table table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .comparison-table th {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
        }
        
        .comparison-table td {
            padding: 15px;
            border-bottom: 1px solid #ecf0f1;
        }
        
        .comparison-table tr:nth-child(even) {
            background: #f8f9fa;
        }
        
        .highlight {
            background: linear-gradient(135deg, #ffeaa7, #fdcb6e);
            padding: 3px 8px;
            border-radius: 5px;
            font-weight: 600;
        }
        
        .warning-box {
            background: #fff5f5;
            border-left: 4px solid #e53e3e;
            padding: 20px;
            border-radius: 0 10px 10px 0;
            margin: 20px 0;
        }
        
        .warning-box h4 {
            color: #c53030;
            margin-bottom: 10px;
        }
        
        .success-box {
            background: #f0fff4;
            border-left: 4px solid #38a169;
            padding: 20px;
            border-radius: 0 10px 10px 0;
            margin: 20px 0;
        }
        
        .success-box h4 {
            color: #2f855a;
            margin-bottom: 10px;
        }
        
        @media (max-width: 768px) {
            .table-container, .trigger-flow {
                flex-direction: column;
            }
            
            .arrow {
                transform: rotate(90deg);
                margin: 10px 0;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .section-title {
                font-size: 1.5rem;
            }
            
            .content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Database Concepts: Materialized Views & Triggers</h1>
            <p>Visual Guide to Understanding Core Database Performance Features</p>
        </div>
        
        <div class="content">
            <!-- Materialized Views Section -->
            <section class="concept-section">
                <h2 class="section-title">Materialized Views</h2>
                
                <div class="concept-box">
                    <h3>What is a Materialized View?</h3>
                    <p>A <strong>Materialized View</strong> is a pre-computed table that stores the results of a complex query. Unlike regular views (which are virtual), materialized views physically store data on disk, providing faster access to complex aggregated data.</p>
                </div>
                
                <div class="mv-diagram">
                    <h3 style="text-align: center; margin-bottom: 30px; color: #2c3e50;">Materialized View Creation Process</h3>
                    
                    <div class="table-container">
                        <div class="table">
                            <h3>Patients Table</h3>
                            <div class="table-rows">
                                <div class="row">ID | Name | DOB</div>
                                <div class="row">1 | John | 1985</div>
                                <div class="row">2 | Jane | 1990</div>
                                <div class="row">3 | Bob | 1975</div>
                            </div>
                        </div>
                        
                        <div class="arrow">+</div>
                        
                        <div class="table">
                            <h3>Visits Table</h3>
                            <div class="table-rows">
                                <div class="row">ID | Patient_ID | Date</div>
                                <div class="row">101 | 1 | 2024-01</div>
                                <div class="row">102 | 1 | 2024-03</div>
                                <div class="row">103 | 2 | 2024-02</div>
                            </div>
                        </div>
                        
                        <div class="arrow">+</div>
                        
                        <div class="table">
                            <h3>Lab_Results Table</h3>
                            <div class="table-rows">
                                <div class="row">ID | Visit_ID | Test</div>
                                <div class="row">201 | 101 | Blood</div>
                                <div class="row">202 | 102 | X-Ray</div>
                                <div class="row">203 | 103 | MRI</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="join-process">
                        <h4>Complex JOIN + AGGREGATION Query</h4>
                        <p>SELECT p.Name, COUNT(v.Visit_ID), MAX(v.Visit_Date), AGE_CALC(p.DOB)<br>
                        FROM Patients p JOIN Visits v JOIN Lab_Results l<br>
                        GROUP BY p.Patient_ID, p.Name, p.DOB</p>
                    </div>
                    
                    <div style="text-align: center; margin: 20px 0;">
                        <div class="arrow" style="transform: rotate(90deg);">⬇</div>
                    </div>
                    
                    <div class="table materialized-view" style="margin: 0 auto; max-width: 400px;">
                        <h3>Patient_History_Snapshot (Materialized View)</h3>
                        <div class="table-rows">
                            <div class="row">Name | Total_Visits | Last_Visit | Age</div>
                            <div class="row">John | 2 | 2024-03-15 | 39</div>
                            <div class="row">Jane | 1 | 2024-02-10 | 34</div>
                            <div class="row">Bob | 0 | NULL | 49</div>
                        </div>
                    </div>
                </div>
                
                <div class="success-box">
                    <h4>Key Benefits:</h4>
                    <ul class="concept-list">
                        <li><span class="highlight">Faster Query Performance</span> - Pre-computed results eliminate expensive JOINs</li>
                        <li><span class="highlight">Reduced CPU Load</span> - No need to recalculate complex aggregations</li>
                        <li><span class="highlight">Better Concurrency</span> - Multiple users can access pre-computed data</li>
                        <li><span class="highlight">Optimized Reporting</span> - Perfect for dashboards and analytics</li>
                    </ul>
                </div>
                
                <div class="warning-box">
                    <h4>Trade-offs to Consider:</h4>
                    <ul>
                        <li><strong>Storage Overhead:</strong> Requires additional disk space</li>
                        <li><strong>Refresh Cost:</strong> Must be updated when underlying data changes</li>
                        <li><strong>Data Staleness:</strong> May not reflect real-time changes</li>
                    </ul>
                </div>
            </section>
            
            <!-- Triggers Section -->
            <section class="concept-section">
                <h2 class="section-title">Database Triggers</h2>
                
                <div class="concept-box">
                    <h3>What is a Database Trigger?</h3>
                    <p>A <strong>Database Trigger</strong> is a special stored procedure that automatically executes (or "fires") in response to specific database events like INSERT, UPDATE, or DELETE operations. Triggers run automatically without being explicitly called.</p>
                </div>
                
                <div class="trigger-diagram">
                    <h3 style="text-align: center; margin-bottom: 30px; color: #2c3e50;">Trigger Execution Flow</h3>
                    
                    <div class="trigger-flow">
                        <div class="trigger-step">
                            <div class="step-number">1</div>
                            <div class="step-title">Data Operation</div>
                            <div class="step-desc">User attempts to INSERT, UPDATE, or DELETE data in a table</div>
                        </div>
                        
                        <div class="arrow">→</div>
                        
                        <div class="trigger-step">
                            <div class="step-number">2</div>
                            <div class="step-title">Trigger Fires</div>
                            <div class="step-desc">Database automatically detects the operation and executes the trigger</div>
                        </div>
                        
                        <div class="arrow">→</div>
                        
                        <div class="trigger-step">
                            <div class="step-number">3</div>
                            <div class="step-title">Validation Logic</div>
                            <div class="step-desc">Trigger performs business rules validation or data transformation</div>
                        </div>
                        
                        <div class="arrow">→</div>
                        
                        <div class="trigger-step">
                            <div class="step-number">4</div>
                            <div class="step-title">Proceed or Block</div>
                            <div class="step-desc">Operation continues if valid, or gets blocked with error message</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 40px; background: #fff3cd; padding: 20px; border-radius: 10px; border: 2px dashed #f39c12;">
                        <h4 style="color: #d68910; text-align: center; margin-bottom: 15px;">EHR System Example: Allergy Duplicate Prevention</h4>
                        <div style="background: white; padding: 15px; border-radius: 8px; font-family: monospace; font-size: 0.9rem;">
                            <strong>BEFORE INSERT ON Allergies</strong><br>
                            → Check if similar allergen exists for patient<br>
                            → If duplicate found: RAISE_APPLICATION_ERROR<br>
                            → If unique: Allow insertion to proceed
                        </div>
                    </div>
                </div>
                
                <div class="comparison-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Trigger Type</th>
                                <th>When it Fires</th>
                                <th>Use Case Example</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>BEFORE INSERT</strong></td>
                                <td>Before new record is added</td>
                                <td>Validate data, prevent duplicates, auto-generate IDs</td>
                            </tr>
                            <tr>
                                <td><strong>AFTER INSERT</strong></td>
                                <td>After new record is added</td>
                                <td>Log activity, update related tables, send notifications</td>
                            </tr>
                            <tr>
                                <td><strong>BEFORE UPDATE</strong></td>
                                <td>Before existing record is modified</td>
                                <td>Audit changes, validate business rules</td>
                            </tr>
                            <tr>
                                <td><strong>AFTER UPDATE</strong></td>
                                <td>After existing record is modified</td>
                                <td>Refresh materialized views, sync related data</td>
                            </tr>
                            <tr>
                                <td><strong>BEFORE DELETE</strong></td>
                                <td>Before record is removed</td>
                                <td>Check referential integrity, prevent critical data loss</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div class="success-box">
                    <h4>Advantages of Database Triggers:</h4>
                    <ul class="concept-list">
                        <li><span class="highlight">Automatic Execution</span> - No need to remember to call them</li>
                        <li><span class="highlight">Data Consistency</span> - Enforces business rules at database level</li>
                        <li><span class="highlight">Centralized Logic</span> - Business rules in one place, not scattered in applications</li>
                        <li><span class="highlight">Security</span> - Cannot be bypassed by applications</li>
                    </ul>
                </div>
                
                <div class="warning-box">
                    <h4>Potential Drawbacks:</h4>
                    <ul>
                        <li><strong>Performance Impact:</strong> Adds overhead to DML operations</li>
                        <li><strong>Debugging Difficulty:</strong> Hidden logic that's hard to trace</li>
                        <li><strong>Cascade Effects:</strong> One trigger can fire other triggers</li>
                        <li><strong>Portability:</strong> Database-specific syntax</li>
                    </ul>
                </div>
            </section>
            
            <!-- Summary Comparison -->
            <section class="concept-section">
                <h2 class="section-title">Key Differences Summary</h2>
                
                <div class="comparison-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Aspect</th>
                                <th>Materialized Views</th>
                                <th>Triggers</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>Primary Purpose</strong></td>
                                <td>Improve query performance through pre-computed results</td>
                                <td>Enforce business rules and data integrity</td>
                            </tr>
                            <tr>
                                <td><strong>Execution Timing</strong></td>
                                <td>During SELECT queries (read operations)</td>
                                <td>During INSERT/UPDATE/DELETE (write operations)</td>
                            </tr>
                            <tr>
                                <td><strong>Data Storage</strong></td>
                                <td>Stores aggregated/joined data physically</td>
                                <td>No data storage - contains logic only</td>
                            </tr>
                            <tr>
                                <td><strong>Performance Impact</strong></td>
                                <td>Speeds up SELECT queries, slows down data changes</td>
                                <td>Adds overhead to data modification operations</td>
                            </tr>
                            <tr>
                                <td><strong>Best Used For</strong></td>
                                <td>Reporting, analytics, dashboards</td>
                                <td>Data validation, audit trails, business rules</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </section>
        </div>
    </div>
</body>
</html>
 Assignment
Problem Statement:

Design an Electronic Health Records System to manage patient records, clinical encounters, test results, prescriptions, allergies, and vaccination history. Focus on data security, integrity, and quick access to longitudinal patient data.

📝 Schema Design

Main Tables:
• Patients (Patient_ID, Name, DOB, Gender, Contact, Address, Blood_Type, Insurance_ID)
• Visits (Visit_ID, Patient_ID, Visit_Date, Doctor_ID, Reason, Notes)
• Lab_Results (Result_ID, Visit_ID, Test_Name, Result_Value, Normal_Range, Test_Date)
• Prescriptions (Prescription_ID, Visit_ID, Medicine_ID, Dosage, Frequency, Start_Date, End_Date)
• Allergies (Allergy_ID, Patient_ID, Allergen, Severity, Notes)
• Vaccinations (Vaccine_ID, Patient_ID, Vaccine_Name, Dose_Number, Administered_Date)

Reference Tables:
• Insurance_Providers (Insurance_ID, Name, Coverage)
• Medications (Medicine_ID, Name, Type, Manufacturer)

✅ SQL Queries:

• Patients with abnormal lab results in the last 3 months.
• List of medications prescribed by each doctor.
• Patients with known allergies to prescribed medications.
• Vaccination history for patients under age 12.
• Patients missing required vaccinations.
• Lab test trends (e.g., increasing cholesterol over time).

✅ PL/SQL Logic:

• Procedure to add a lab result with validation.
• Trigger to prevent duplicate allergy records.
• Function to retrieve patient summary (diagnoses, meds, labs).
• Exception handling for invalid dosage or test inputs.

✅ Performance:

• Index on Patient_ID, Visit_Date, Test_Name
• Partition Lab_Results by year
• Materialized view for patient history snapshot

Expected Outcome:
✔ Well-designed relational database schema with normalized tables.
✔ Efficient SQL queries covering real-world e-commerce scenarios.
✔ PL/SQL procedures, triggers, and exception handling for business logic implementation.
✔ Performance optimization techniques applied for improved query execution.
✔ Clean, well-documented SQL scripts.
📅 Submission Guidelines:
📌 Submit a SQL script file (.sql) containing:
Table creation scripts.
Data insertion scripts.
SQL queries with their expected outputs.
📌 Submit a PL/SQL script file (.sql) containing:
Procedures, functions, and triggers.
📌 Submit a Performance Report (PDF/Word) explaining:
Query optimization techniques used.
Indexing and partitioning strategies.
Any performance improvements applied.
📌 Presentation
🎯 Evaluation Criteria:
Category
Weightage
Database Design & Normalization
20%
Correctness of SQL Queries
25%
PL/SQL Implementation (Procedures, Triggers, Exception Handling)
30%
Performance Optimization Techniques
15%
Code Readability & Documentation
10%


-- Hospitals
BEGIN
    EXECUTE IMMEDIATE '
    CREATE TABLE Hospitals (
      Hospital_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      Name        VARCHAR2(100) NOT NULL,
      Address     VARCHAR2(150),
      Contact     VARCHAR2(20)
        CHECK (REGEXP_LIKE(Contact, ''^\d{7,15}$''))  -- allows 7 to 15 digits
    )';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            NULL;  -- table already exists
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Hospitals: ' || SQLERRM);
            RAISE;
        END IF;
END;
/


-- Department_Types
BEGIN
    EXECUTE IMMEDIATE '
        CREATE TABLE Department_Types (
            Dept_Type_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
            Name         VARCHAR2(100) UNIQUE NOT NULL
        )';
END;
/

-- Hospital_Departments

BEGIN
    EXECUTE IMMEDIATE '
        CREATE TABLE Hospital_Departments (
            Hospital_ID  NUMBER NOT NULL,
            Dept_Type_ID NUMBER NOT NULL,
            PRIMARY KEY (Hospital_ID, Dept_Type_ID),
            FOREIGN KEY (Hospital_ID) REFERENCES Hospitals(Hospital_ID) ON DELETE CASCADE,
            FOREIGN KEY (Dept_Type_ID) REFERENCES Department_Types(Dept_Type_ID)
        )';
END;
/

--DROP TABLE Lab_Results CASCADE CONSTRAINTS PURGE;

 
-- Doctors (keep doctors even if department is removed)
BEGIN
    EXECUTE IMMEDIATE '
    CREATE TABLE Doctors (
      Doctor_ID        NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      Name             VARCHAR2(100) NOT NULL,
      Specialization   VARCHAR2(100),
      Contact          VARCHAR2(20)
                      CHECK (LENGTH(Contact) = 10 AND REGEXP_LIKE(Contact, ''^\d{10}$'')),
      Email            VARCHAR2(100)
                      CHECK (REGEXP_LIKE(Email, ''^[^@]+@[^@]+\.[^@]+$'')),
      Experience_Years NUMBER CHECK (Experience_Years >= 0),
      Availability     VARCHAR2(50),
      Hospital_ID      NUMBER NOT NULL,
      Dept_Type_ID     NUMBER NOT NULL,
      CONSTRAINT fk_doc_hospdept FOREIGN KEY (Hospital_ID, Dept_Type_ID)
        REFERENCES Hospital_Departments(Hospital_ID, Dept_Type_ID)
        ON DELETE CASCADE
    )';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            NULL; -- Table already exists
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Doctors: ' || SQLERRM);
            RAISE;
        END IF;
END;
/

 
-- Insurance Providers
BEGIN
    EXECUTE IMMEDIATE '
    CREATE TABLE Insurance_Providers (
      Insurance_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      Name         VARCHAR2(100) NOT NULL,
      Coverage     VARCHAR2(200) NOT NULL
    )';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            NULL;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Insurance_Providers: ' || SQLERRM);
            RAISE;
        END IF;
END;
/
 
-- Patients
BEGIN
    EXECUTE IMMEDIATE '
    CREATE TABLE Patients (
      Patient_ID   NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      Name         VARCHAR2(100) NOT NULL,
      DOB          DATE NOT NULL,
      Gender       VARCHAR2(10) CHECK (Gender IN (''Male'',''Female'',''Other'')),
      Contact      VARCHAR2(20) CHECK (LENGTH(Contact) = 10 AND REGEXP_LIKE(Contact, ''^\d{10}$'')),
      Address      VARCHAR2(200),
      Blood_Type   VARCHAR2(5),
      Insurance_ID NUMBER,
      CONSTRAINT fk_pat_ins FOREIGN KEY (Insurance_ID)
        REFERENCES Insurance_Providers(Insurance_ID) ON DELETE SET NULL
    )';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            NULL;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Patients: ' || SQLERRM);
            RAISE;
        END IF;
END;
/
 
-- Visits (keep visits even if doctor or patient is removed)
BEGIN
    EXECUTE IMMEDIATE '
    CREATE TABLE Visits (
      Visit_ID   NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      Patient_ID NUMBER,
      Visit_Date DATE NOT NULL,
      Doctor_ID  NUMBER,
      Reason     VARCHAR2(200),
      Notes      CLOB,
      CONSTRAINT fk_visit_pat FOREIGN KEY (Patient_ID)
        REFERENCES Patients(Patient_ID) ON DELETE SET NULL,
      CONSTRAINT fk_visit_doc FOREIGN KEY (Doctor_ID)
        REFERENCES Doctors(Doctor_ID) ON DELETE SET NULL
    )';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            NULL;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Visits: ' || SQLERRM);
            RAISE;
        END IF;
END;
/
 
--  Medications
BEGIN
    EXECUTE IMMEDIATE '
    CREATE TABLE Medications (
      Medicine_ID  NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      Name         VARCHAR2(100) NOT NULL,
      Type         VARCHAR2(50),
      Manufacturer VARCHAR2(100)
    )';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            NULL;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Medications: ' || SQLERRM);
            RAISE;
        END IF;
END;
/
 
-- Prescriptions
BEGIN
    EXECUTE IMMEDIATE '
    CREATE TABLE Prescriptions (
      Prescription_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      Visit_ID        NUMBER NOT NULL,
      Medicine_ID     NUMBER NOT NULL,
      Dosage          VARCHAR2(50) NOT NULL,
      Frequency       VARCHAR2(50),
      Start_Date      DATE,
      End_Date        DATE,
      CONSTRAINT fk_pres_visit FOREIGN KEY (Visit_ID)
        REFERENCES Visits(Visit_ID) ON DELETE CASCADE,
      CONSTRAINT fk_pres_med FOREIGN KEY (Medicine_ID)
        REFERENCES Medications(Medicine_ID)
    )';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            NULL;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Prescriptions: ' || SQLERRM);
            RAISE;
        END IF;
END;
/
 
-- Lab_Results (partitioned by Test_Date)
BEGIN
    EXECUTE IMMEDIATE '
        CREATE TABLE Lab_Results (
            Result_ID     NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
            Visit_ID      NUMBER NOT NULL,
            Test_Name     VARCHAR2(100) NOT NULL,
            Result_Value  NUMBER,
            Normal_Range  VARCHAR2(50),
            Test_Date     DATE NOT NULL,
            CONSTRAINT fk_lab_visit FOREIGN KEY (Visit_ID)
                REFERENCES Visits(Visit_ID) ON DELETE CASCADE
        )
        PARTITION BY RANGE (Test_Date) (
            PARTITION p2022 VALUES LESS THAN (TO_DATE(''2023-01-01'', ''YYYY-MM-DD'')),
            PARTITION p2023 VALUES LESS THAN (TO_DATE(''2024-01-01'', ''YYYY-MM-DD'')),
            PARTITION p2024 VALUES LESS THAN (TO_DATE(''2025-01-01'', ''YYYY-MM-DD'')),
            PARTITION pmax  VALUES LESS THAN (MAXVALUE)
        )
    ';
EXCEPTION 
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            NULL;  -- Table already exists
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Lab_Results: ' || SQLERRM);
            RAISE;
        END IF;
END;
/
 
-- Allergies
BEGIN
    EXECUTE IMMEDIATE '
    CREATE TABLE Allergies (
      Allergy_ID  NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      Patient_ID  NUMBER NOT NULL,
      Allergen    VARCHAR2(100) NOT NULL,
      Severity    VARCHAR2(20) CHECK (Severity IN (''Mild'',''Moderate'',''Severe'')),
      Notes       VARCHAR2(200),
      CONSTRAINT fk_allergy_pat FOREIGN KEY (Patient_ID)
        REFERENCES Patients(Patient_ID) ON DELETE CASCADE
    )';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            NULL;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Allergies: ' || SQLERRM);
            RAISE;
        END IF;
END;
/
 
-- Vaccinations
BEGIN
    EXECUTE IMMEDIATE '
    CREATE TABLE Vaccinations (
      Vaccine_ID       NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      Patient_ID       NUMBER NOT NULL,
      Vaccine_Name     VARCHAR2(100) NOT NULL,
      Dose_Number      NUMBER CHECK (Dose_Number >= 1),
      Administered_Date DATE NOT NULL,
      CONSTRAINT fk_vacc_pat FOREIGN KEY (Patient_ID)
        REFERENCES Patients(Patient_ID) ON DELETE CASCADE
    )';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            NULL;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Vaccinations: ' || SQLERRM);
            RAISE;
        END IF;
END;
/




-- 1. Hospitals (contact allows 7–15 digits)
INSERT INTO Hospitals (Name, Address, Contact) VALUES
  ('Teaching Hospital',    'Maharajgunj, Kathmandu',  '014410000'),
  ('Norvic International', 'Thapathali, Kathmandu',   '014250000'),
  ('Gandaki Hospital',     'Dhawaltari, Pokhara',     '061540000');
 

-- 2. Department_types
INSERT INTO Department_Types (Name)
VALUES ('Cardiology');

INSERT INTO Department_Types (Name)
VALUES ('Neurology');

INSERT INTO Department_Types (Name)
VALUES ('Orthopedics');

-- Hospital_Departments
-- Teaching's Cardiology
INSERT INTO Hospital_Departments (Hospital_ID, Dept_Type_ID)
VALUES (1, 1);

-- Teaching's Neurology
INSERT INTO Hospital_Departments (Hospital_ID, Dept_Type_ID)
VALUES (1, 2);

-- Teaching's Orthopedic
INSERT INTO Hospital_Departments (Hospital_ID, Dept_Type_ID) VALUES (1, 3);

-- Norvic's Cardiology
INSERT INTO Hospital_Departments (Hospital_ID, Dept_Type_ID)
VALUES (2, 1);
-- Norvic's Neurology
INSERT INTO Hospital_Departments (Hospital_ID, Dept_Type_ID)
VALUES (2, 2);

-- Norvic's Orthopedics
INSERT INTO Hospital_Departments (Hospital_ID, Dept_Type_ID)
VALUES (2, 3);

-- Gandaki's Cardiology
INSERT INTO Hospital_Departments (Hospital_ID, Dept_Type_ID)
VALUES (3, 1);
INSERT INTO Hospital_Departments (Hospital_ID, Dept_Type_ID) VALUES (3, 2); 
INSERT INTO Hospital_Departments (Hospital_ID, Dept_Type_ID) VALUES (3, 3);


-- 3. Doctors
-- Teaching Hospital (ID 1)
INSERT INTO Doctors (Name, Specialization, Contact, Email, Experience_Years, Availability, Hospital_ID, Dept_Type_ID)
VALUES ('Dr. Ram Bahadur', 'Cardiologist', '9800000001', 'ram.teaching@hospital.com', 9, 'Mon-Fri 9AM-5PM', 1, 1);

INSERT INTO Doctors (Name, Specialization, Contact, Email, Experience_Years, Availability, Hospital_ID, Dept_Type_ID)
VALUES ('Dr. Anu Sharma', 'Neurologist', '9800000002', 'anu.teaching@hospital.com', 7, 'Tue-Thu 10AM-3PM', 1, 2);

INSERT INTO Doctors (Name, Specialization, Contact, Email, Experience_Years, Availability, Hospital_ID, Dept_Type_ID)
VALUES ('Dr. Milan Basnet', 'Orthopedic', '9800000003', 'milan.teaching@hospital.com', 10, 'Mon-Wed 1PM-4PM', 1, 3);

-- Norvic Hospital (ID 2)
INSERT INTO Doctors (Name, Specialization, Contact, Email, Experience_Years, Availability, Hospital_ID, Dept_Type_ID)
VALUES ('Dr. Aayush Shrestha', 'Cardiologist', '9800000001', 'aayush@hospital.com', 10, 'Mon-Fri 9AM-5PM', 2, 1);

INSERT INTO Doctors (Name, Specialization, Contact, Email, Experience_Years, Availability, Hospital_ID, Dept_Type_ID)
VALUES ('Dr. Prakash Joshi', 'Neurologist', '9800000005', 'prakash.norvic@hospital.com', 6, 'Wed-Fri 10AM-1PM', 2, 2);

INSERT INTO Doctors (Name, Specialization, Contact, Email, Experience_Years, Availability, Hospital_ID, Dept_Type_ID)
VALUES ('Dr. Rina Lama', 'Orthopedic', '9800000006', 'rina.norvic@hospital.com', 8, 'Tue-Thu 12PM-4PM', 2, 3);

-- Gandaki Hospital (ID 3)
INSERT INTO Doctors (Name, Specialization, Contact, Email, Experience_Years, Availability, Hospital_ID, Dept_Type_ID)
VALUES ('Dr. Kamal Karki', 'Cardiologist', '9800000007', 'kamal.gandaki@hospital.com', 13, 'Mon-Fri 10AM-3PM', 3, 1);

INSERT INTO Doctors (Name, Specialization, Contact, Email, Experience_Years, Availability, Hospital_ID, Dept_Type_ID)
VALUES ('Dr. Meena Dahal', 'Neurologist', '9800000008', 'meena.gandaki@hospital.com', 9, 'Mon-Wed 9AM-12PM', 3, 2);

INSERT INTO Doctors (Name, Specialization, Contact, Email, Experience_Years, Availability, Hospital_ID, Dept_Type_ID)
VALUES ('Dr. Binod Pandey', 'Orthopedic', '9800000009', 'binod.gandaki@hospital.com', 5, 'Thu-Fri 2PM-6PM', 3, 3);




-- 4. Insurance Providers
INSERT INTO Insurance_Providers (Name, Coverage) VALUES
  ('Nepal Life Insurance',  'Basic'),
  ('IME General Insurance', 'Comprehensive'),
  ('Sagarmatha Insurance',  'Premium');

-- 5. Patients
INSERT INTO Patients (Name, DOB, Gender, Contact, Address, Blood_Type, Insurance_ID) VALUES
  ('Anita Sharma',    DATE '2012-07-01', 'Female','9801122334','Kathmandu',  'A+', 1),
  ('Bikash Thapa',    DATE '1985-03-22', 'Male',  '9802233445','Pokhara',    'O+', 2),
  ('Chitra Rai',      DATE '1978-11-15', 'Female','9803344556','Butwal',     'B+', 3),
  ('Dipak Gurung',    DATE '1990-01-30', 'Male',  '9804455667','Biratnagar', 'AB-', 1),
  ('Elina Lama',      DATE '2015-05-20', 'Female','9805566778','Chitwan',    'O-', 2),
  ('Fouzia Khan',     DATE '2003-09-10', 'Female','9806677889','Dhangadhi',  'A-', 3),
  ('Gopal KC',        DATE '1955-12-05', 'Male',  '9807788990','Kathmandu',  'B-', 1),
  ('Hema Magar',      DATE '2010-04-15', 'Female','9808899001','Pokhara',    'AB+', 2),
  ('Ishwar Shrestha', DATE '1968-08-08', 'Male',  '9809900112','Bhaktapur',  'A+', 3),
  ('Jaya Manandhar',  DATE '2013-02-25', 'Female','9810011223','Lalitpur',   'O+', 1);


-- 6. Visits
INSERT INTO Visits (Patient_ID, Visit_Date, Doctor_ID, Reason, Notes) VALUES
  (1, TO_DATE('2025-06-01', 'YYYY-MM-DD'), 1, 'General Checkup',         'Routine annual exam'),
  (2, TO_DATE('2025-05-20', 'YYYY-MM-DD'), 3, 'Chest Pain',              'ED referral for ECG'),
  (3, TO_DATE('2025-06-10', 'YYYY-MM-DD'), 4, 'Skin Rash',               'Suspected fungal infection'),
  (4, TO_DATE('2025-05-15', 'YYYY-MM-DD'), 5, 'Knee Pain',               'X-ray advised'),
  (5, TO_DATE('2025-06-12', 'YYYY-MM-DD'), 2, 'Vaccination',             'MMR dose 1'),
  (6, TO_DATE('2025-04-30', 'YYYY-MM-DD'), 1, 'Hypertension Follow-up',  'BP stable on meds'),
  (7, TO_DATE('2025-06-05', 'YYYY-MM-DD'), 3, 'High Cholesterol',        'Discussed statins'),
  (8, TO_DATE('2025-06-08', 'YYYY-MM-DD'), 2, 'Fever and Cough',           'Prescribed antibiotics'),
  (9, TO_DATE('2025-05-22', 'YYYY-MM-DD'), 1, 'Diabetes Check',          'HbA1c test ordered'),
  (10,TO_DATE('2025-06-02', 'YYYY-MM-DD'), 2, 'Routine Pediatric Exam',  'Growth and development normal'),
  (2, TO_DATE('2025-06-14', 'YYYY-MM-DD'), 1, 'Acid Reflux',             'Prescribed PPI'),
  (3, TO_DATE('2025-06-15', 'YYYY-MM-DD'), 4, 'Eczema Flare',            'Topical steroid cream'),
  (4, TO_DATE('2025-05-18', 'YYYY-MM-DD'), 5, 'Fracture Follow-up',      'Cast removed, physiotherapy'),
  (6, TO_DATE('2025-06-10', 'YYYY-MM-DD'), 1, 'General Consultation',    'Advised lifestyle changes'),
  (7, TO_DATE('2025-06-11', 'YYYY-MM-DD'), 3, 'Post-MI Follow-up',       'Reviewed ECHO results');



-- 7. Medications
INSERT INTO Medications (Name, Type, Manufacturer) VALUES
  ('Paracetamol',  'Analgesic',     'Deurali-Janta'),
  ('Amoxicillin',  'Antibiotic',    'Himalaya Med'),
  ('Atorvastatin', 'Statin',        'Nepal Pharma'),
  ('Cetirizine',   'Antihistamine', 'Omnica Labs'),
  ('Clotrimazole', 'Antifungal',    'Asian Pharmaceuticals'),
  ('Metformin',    'Antidiabetic',  'Chemidrug'),
  ('Omeprazole',   'PPI',           'Deurali-Janta');


-- 8. Prescriptions
INSERT INTO Prescriptions (Visit_ID, Medicine_ID, Dosage, Frequency, Start_Date, End_Date) VALUES
  (1, 1, '500mg',    'TID', DATE '2025-06-01', DATE '2025-06-03'),
  (2, 3, '20mg',     'OD',  DATE '2025-05-20', DATE '2025-11-20'),
  (3, 5, '1% cream', 'BID', DATE '2025-06-10', DATE '2025-06-17'),
  (4, 1, '650mg',    'OD',  DATE '2025-05-15', DATE '2025-05-22'),
  (5, 2, '250mg',    'TID', DATE '2025-06-12', DATE '2025-06-16'),
  (6, 6, '500mg',    'BID', DATE '2025-04-30', DATE '2025-05-30'),
  (7, 3, '10mg',     'OD',  DATE '2025-06-05', DATE '2025-12-05'),
  (8, 2, '250mg',    'TID', DATE '2025-06-08', DATE '2025-06-14'),
  (9, 6, '850mg',    'BID', DATE '2025-05-22', DATE '2025-06-22'),
  (10,1, '500mg',    'TID', DATE '2025-06-02', DATE '2025-06-05'),
  (11,7, '20mg',     'OD',  DATE '2025-06-14', DATE '2025-06-21'),
  (12,5, '1% cream', 'BID', DATE '2025-06-15', DATE '2025-06-22'),
  (13,1, '500mg',    'TID', DATE '2025-05-18', DATE '2025-05-25'),
  (14,1, '500mg',    'TID', DATE '2025-06-10', DATE '2025-06-13'),
  (15,3, '20mg',     'OD',  DATE '2025-06-11', DATE '2025-12-11');


-- 9. Lab_Results
INSERT INTO Lab_Results (Visit_ID, Test_Name, Result_Value, Normal_Range, Test_Date) VALUES
  (1, 'CBC',           5.4,  '4.5-6.5', DATE '2025-06-01'),
  (2, 'Cholesterol',   240,  '125-200', DATE '2025-05-20'),
  (3, 'KOH Prep',      0.5,  '0-1',     DATE '2025-06-11'),
  (4, 'CRP',           3.2,  '0-5',     DATE '2025-05-15'),
  (5, 'CBC',           6.0,  '4.5-6.5', DATE '2025-06-12'),
  (6, 'HbA1c',         7.2,  '4.0-5.6', DATE '2025-04-30'),
  (7, 'Cholesterol',   180,  '125-200', DATE '2025-06-05'),
  (8, 'CBC',           5.8,  '4.5-6.5', DATE '2025-06-08'),
  (9, 'HbA1c',         6.5,  '4.0-5.6', DATE '2025-05-22'),
  (10,'CBC',           5.5,  '4.5-6.5', DATE '2025-06-02'),
  (11,'Endoscopy',     NULL, '-',       DATE '2025-06-14'),
  (12,'Skin Scraping', 1.2,  '0-1',     DATE '2025-06-15'),
  (13,'Vitamin D',     18,   '20-50',   DATE '2025-05-18'),
  (14,'CBC',           5.2,  '4.5-6.5', DATE '2025-06-10'),
  (15,'ECHO',          NULL, '-',       DATE '2025-06-11');

  INSERT INTO Lab_Results (Visit_ID, Test_Name, Result_Value, Test_Date, Normal_Range) VALUES
(1, 'Cholesterol', 180, DATE '2025-01-10', '125-200'),
(1, 'Cholesterol', 190, DATE '2025-02-10', '125-200'),
(1, 'Cholesterol', 210, DATE '2025-03-10', '125-200'),
(2, 'Hemoglobin', 11.5, DATE '2025-01-05', '12.0-15.5'),
(2, 'Hemoglobin', 12.0, DATE '2025-02-05', '12.0-15.5'),
(2, 'Hemoglobin', 12.3, DATE '2025-03-05', '12.0-15.5'),
(3, 'Glucose', 95, DATE '2025-01-20', '70-100'),
(3, 'Glucose', 105, DATE '2025-02-20', '70-100'),
(3, 'Glucose', 99, DATE '2025-03-20', '70-100'),
(3, 'Glucose', 102, DATE '2025-04-20', '70-100');


-- 10. Allergies
INSERT INTO Allergies (Patient_ID, Allergen, Severity, Notes) VALUES
  (2, 'Penicillin', 'Severe',   'Hives and swelling'),
  (3, 'Dust',       'Mild',     'Seasonal sneezing'),
  (5, 'Peanuts',    'Moderate', 'Avoid food products'),
  (6, 'Latex',      'Moderate', 'Surgery prep reaction'),
  (7, 'Pollen',     'Mild',     'Hay fever'),
  (8, 'Shellfish',  'Severe',   'Anaphylaxis risk'),
  (1, 'Paracetamol', 'Moderate', 'Causes liver discomfort'),
  (2, 'Atorvastatin', 'Severe', 'Muscle pain and fatigue'),
  (4, 'Clotrimazole cream', 'Mild', 'Itching and redness');



-- 11. Vaccinations
INSERT INTO Vaccinations (Patient_ID, Vaccine_Name, Dose_Number, Administered_Date) VALUES
  (1, 'MMR',         2, DATE '2024-07-01'),
  (5, 'Polio',       3, DATE '2025-06-12'),
  (5, 'DPT',         3, DATE '2025-06-12'),
  (8, 'Hepatitis B', 2, DATE '2024-05-15'),
  (10,'MMR',         1, DATE '2025-02-25'),
  (10,'Polio',       1, DATE '2025-02-25'),
  (1, 'COVID-19',    1, DATE '2021-04-15'),
  (8, 'Typhoid',     1, DATE '2025-06-08');




---- Indexes for Performance Optimization

CREATE INDEX IDX_DEPT_HOSP ON Hospital_Departments (HOSPITAL_ID);
CREATE INDEX IDX_DOC_DEPT ON DOCTORS (DEPT_TYPE_ID);
CREATE INDEX IDX_VISIT_PAT ON VISITS (PATIENT_ID);
CREATE INDEX IDX_VISIT_DOC ON VISITS (DOCTOR_ID);
CREATE INDEX IDX_PRES_VISIT ON PRESCRIPTIONS (VISIT_ID);
CREATE INDEX IDX_PRES_MED ON PRESCRIPTIONS (MEDICINE_ID);
CREATE INDEX IDX_ALLERGY_PAT ON ALLERGIES (PATIENT_ID);
CREATE INDEX IDX_VACC_PAT ON VACCINATIONS (PATIENT_ID);
CREATE INDEX IDX_VISIT_DATE ON VISITS (VISIT_DATE);
CREATE INDEX IDX_TEST_NAME ON LAB_RESULTS (TEST_NAME);


-- Patient_History_Snapshot Materialized View
-- Purpose: Consolidates essential patient history and status indicators for reporting and analytics.
-- Contains derived insights ==> visit trends, allergies summary, lab result snapshots, medication status, vaccination coverage, and chronic care flags.
CREATE MATERIALIZED VIEW Patient_History_Snapshot
BUILD IMMEDIATE
REFRESH COMPLETE
ON DEMAND
AS
SELECT
    p.Patient_ID,
    p.Name,
    p.DOB,
    p.Gender,
    p.Blood_Type,
    ip.Name AS Insurance_Provider,
    p.Contact,
    p.Address,

    COUNT(DISTINCT v.Visit_ID) AS Total_Visits,
    
    MAX(v.Visit_Date) AS Last_Visit_Date,

    FLOOR(MONTHS_BETWEEN(SYSDATE, p.DOB)/12) AS Age,

    LISTAGG(DISTINCT a.Allergen || ' [' || a.Severity || ']', ', ') 
        WITHIN GROUP (ORDER BY a.Allergen) AS Known_Allergies,

    COUNT(DISTINCT va.Vaccine_Name) AS Vaccination_Count,

    LISTAGG(DISTINCT 
        CASE WHEN lr.Test_Date >= SYSDATE - 180 
             THEN lr.Test_Name || ': ' || lr.Result_Value || ' (' || TO_CHAR(lr.Test_Date, 'YYYY-MM-DD') || ')' 
        END, '; ') 
        WITHIN GROUP (ORDER BY lr.Test_Date) AS Recent_Lab_Results,

  

    COALESCE(
            LISTAGG(DISTINCT 
            CASE 
                WHEN SYSDATE BETWEEN pr.Start_Date AND pr.End_Date 
                THEN m.Name || ' (' || pr.Dosage || ')' 
                END, ', ') WITHIN GROUP (ORDER BY m.Name),
                'Currently Not On Any Medications.'
            ) AS Current_Medications,

    CASE 
        WHEN MAX(pr.End_Date - pr.Start_Date) > 90 THEN 'Yes' 
        ELSE 'No' 
    END AS Chronic_Medication_Flag

FROM Patients p
LEFT JOIN Insurance_Providers ip ON p.Insurance_ID = ip.Insurance_ID
LEFT JOIN Visits v ON p.Patient_ID = v.Patient_ID
LEFT JOIN Allergies a ON p.Patient_ID = a.Patient_ID
LEFT JOIN Vaccinations va ON p.Patient_ID = va.Patient_ID
LEFT JOIN Lab_Results lr ON v.Visit_ID = lr.Visit_ID
LEFT JOIN Prescriptions pr ON v.Visit_ID = pr.Visit_ID
LEFT JOIN Medications m ON pr.Medicine_ID = m.Medicine_ID

GROUP BY
    p.Patient_ID, p.Name, p.DOB, p.Gender, p.Blood_Type,
    ip.Name, p.Contact, p.Address;

EXEC DBMS_MVIEW.REFRESH('PATIENT_HISTORY_SNAPSHOT');

SELECT * FROM Patient_History_Snapshot







-- Patients with abnormal lab results in the last 3 months
WITH Parsed_Lab_Results AS (
  SELECT
    l.Result_ID,
    l.Visit_ID,
    l.Test_Name,
    TO_NUMBER(l.Result_Value) AS Result_Value,
    TO_NUMBER(REGEXP_SUBSTR(l.Normal_Range, '^\d+(\.\d+)?')) AS min_val,
    TO_NUMBER(REGEXP_SUBSTR(l.Normal_Range, '\d+(\.\d+)?$')) AS max_val,
    l.Test_Date,
    v.Patient_ID
  FROM Lab_Results l
  JOIN Visits v ON l.Visit_ID = v.Visit_ID
  WHERE l.Test_Date >= ADD_MONTHS(
      (SELECT MAX(Test_Date) FROM Lab_Results),
      -3
    )
),
is_abnormal AS(
    SELECT
  p.Patient_ID,
  p.Name AS Patient_Name,
  plr.Test_Name,
  plr.Result_Value,
  plr.min_val,
  plr.max_val,
  plr.Test_Date,
  CASE
    WHEN plr.min_val IS NOT NULL AND plr.max_val IS NOT NULL AND
         (plr.Result_Value < plr.min_val OR plr.Result_Value > plr.max_val)
    THEN 1
    ELSE 0
  END AS is_abnormal
FROM Parsed_Lab_Results plr
JOIN Patients p ON plr.Patient_ID = p.Patient_ID)
SELECT * FROM is_abnormal isab WHERE isab.is_abnormal = 1;


-- List of medications prescribed by each doctor.
SELECT 
    d.Doctor_ID,
    d.Name AS Doctor_Name,
    d.Specialization,
    m.Name AS Medicine_Name,
    COUNT(*) AS Times_Prescribed
FROM Doctors d
JOIN Visits v ON d.Doctor_ID = v.Doctor_ID
JOIN Prescriptions p ON v.Visit_ID = p.Visit_ID
JOIN Medications m ON p.Medicine_ID = m.Medicine_ID
GROUP BY d.Doctor_ID, d.Name, d.Specialization, m.Name
ORDER BY d.Doctor_ID, Times_Prescribed DESC;


-- Patients with known allergies to prescribed medications.
SELECT DISTINCT pa.Patient_ID, pa.Name, m.Name AS Medication
FROM Prescriptions pr
JOIN Visits v ON pr.Visit_ID = v.Visit_ID
JOIN Patients pa ON v.Patient_ID = pa.Patient_ID
JOIN Medications m ON pr.Medicine_ID = m.Medicine_ID
JOIN Allergies a ON a.Patient_ID = pa.Patient_ID
WHERE LOWER(a.Allergen) LIKE '%' || LOWER(m.Name) || '%';


-- Vaccination history for patients under age 12
SELECT p.Patient_ID, p.Name, v.Vaccine_Name, v.Administered_Date
FROM Patients p
JOIN Vaccinations v ON p.Patient_ID = v.Patient_ID
WHERE MONTHS_BETWEEN(SYSDATE, p.DOB) < 12 * 12;

-- Patients missing required vaccinations.
SELECT p.Patient_ID, p.Name
FROM Patients p
WHERE NOT EXISTS (
    SELECT 1 FROM Vaccinations v
    WHERE v.Patient_ID = p.Patient_ID
    AND v.Vaccine_Name = 'MMR'
);

-- Lab test trends (e.g., increasing cholestrol over time)

WITH Lab_Test_Trends AS (
  SELECT
    v.Patient_ID,
    lr.Test_Name,
    lr.Test_Date,
    lr.Result_Value,
    LAG(lr.Result_Value) OVER (
      PARTITION BY v.Patient_ID, lr.Test_Name
      ORDER BY lr.Test_Date
    ) AS Prev_Result
  FROM Lab_Results lr
  JOIN Visits v ON lr.Visit_ID = v.Visit_ID
)
SELECT
  Patient_ID,
  Test_Name,
  Test_Date,
  Result_Value,
  Prev_Result,
  CASE
    WHEN Prev_Result IS NOT NULL AND Result_Value > Prev_Result THEN 'Increasing'
    WHEN Prev_Result IS NOT NULL AND Result_Value < Prev_Result THEN 'Decreasing'
    WHEN Prev_Result IS NOT NULL AND Result_Value = Prev_Result THEN 'Stable'
    ELSE 'No Previous Result'
  END AS Trend_Status
FROM Lab_Test_Trends
ORDER BY Patient_ID, Test_Name, Test_Date;




-- Procedure to add lab results with validation

CREATE OR REPLACE PROCEDURE Add_Lab_Result (
    p_Visit_ID      NUMBER,
    p_Test_Name     VARCHAR2,
    p_Result_Value  NUMBER,
    p_Normal_Range  VARCHAR2,
    p_Test_Date     DATE
)
IS
    v_visit_exists NUMBER;
BEGIN
    -- Check if the Visit ID exists
    SELECT COUNT(*) INTO v_visit_exists FROM Visits WHERE Visit_ID = p_Visit_ID;

    IF v_visit_exists = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Visit ID does not exist');
    END IF;

    -- Validate Test_Name
    IF p_Test_Name IS NULL OR TRIM(p_Test_Name) = '' THEN
        RAISE_APPLICATION_ERROR(-20002, 'Test name cannot be empty');
    END IF;

    -- Validate Result_Value
    IF p_Result_Value < 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Result value cannot be negative');
    END IF;

    -- Validate Test_Date
    IF p_Test_Date > SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20004, 'Test date cannot be in the future');
    END IF;

    -- If all checks pass, insert the lab result
    INSERT INTO Lab_Results (
        Visit_ID, Test_Name, Result_Value, Normal_Range, Test_Date
    ) VALUES (
        p_Visit_ID, p_Test_Name, p_Result_Value, p_Normal_Range, p_Test_Date
    );

    DBMS_OUTPUT.PUT_LINE('Lab result added successfully.');

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error adding lab result: ' || SQLERRM);
        RAISE;
END;
/

BEGIN
  Add_Lab_Result(
    p_Visit_ID       => 2,  -- 20 does NOT exist in Visits
    p_Test_Name      => 'Cholesterol',
    p_Result_Value   => 175,
    p_Normal_Range   => '125-200',
    p_Test_Date      => TO_DATE('2023-06-01', 'YYYY-MM-DD')
  );
END;


-- Trigger to prevent duplicate allergy records
CREATE OR REPLACE TRIGGER prevent_duplicate_allergy
BEFORE INSERT ON Allergies
FOR EACH ROW
DECLARE
    v_exists NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_exists
    FROM Allergies
    WHERE Patient_ID = :NEW.Patient_ID
     AND (
           LOWER(:NEW.Allergen) LIKE '%' || LOWER(Allergen) || '%'  -- new allergen contains old allergen
        OR LOWER(Allergen) LIKE '%' || LOWER(:NEW.Allergen) || '%'  -- old allergen contains new allergen
      );
    
    IF v_exists > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Allergen conflicts with existing record for this patient');
    END IF;
END;
/

Select p.PATIENT_ID, p.NAME, a.ALLERGEN
from patients p
JOIN ALLERGIES a ON a.PATIENT_ID = p.PATIENT_ID;


INSERT INTO Allergies (Patient_ID, Allergen, Severity, Notes) VALUES
  (5, 'Peanuts Buscuits', 'Moderate', 'Avoid food products'); -- Allergen Peanut was already mentioned for this patient


-- Function to retrieve patient summary (diagnoses, meds, labs).

CREATE OR REPLACE FUNCTION get_patient_summary(p_patient_id IN NUMBER)
RETURN CLOB
IS
    v_summary CLOB := '';
BEGIN
    -- Patient Basic Info
    v_summary := 'Patient Summary for ID: ' || p_patient_id || CHR(10) || CHR(10);

    -- Visits with Reasons
    v_summary := v_summary || 'Visits:' || CHR(10);
    FOR rec IN (
        SELECT Visit_ID, TO_CHAR(Visit_Date, 'YYYY-MM-DD') Visit_Date, Reason
        FROM Visits
        WHERE Patient_ID = p_patient_id
        ORDER BY Visit_Date DESC
    ) LOOP
        v_summary := v_summary || '- Visit on ' || rec.Visit_Date || ': ' || rec.Reason || CHR(10);

        -- Prescriptions for this visit
        FOR p IN (
            SELECT m.Name AS Medicine_Name, pr.Dosage, pr.Frequency, 
                   TO_CHAR(pr.Start_Date, 'YYYY-MM-DD') Start_Date,
                   TO_CHAR(pr.End_Date, 'YYYY-MM-DD') End_Date
            FROM Prescriptions pr
            JOIN Medications m ON pr.Medicine_ID = m.Medicine_ID
            WHERE pr.Visit_ID = rec.Visit_ID
        ) LOOP
            v_summary := v_summary || '  * Prescription: ' || p.Medicine_Name || ', Dosage: ' || p.Dosage || 
                         ', Frequency: ' || p.Frequency || ', From ' || p.Start_Date || ' to ' || p.End_Date || CHR(10);
        END LOOP;

        -- Lab results for this visit
        FOR l IN (
            SELECT Test_Name, Result_Value, Normal_Range, TO_CHAR(Test_Date, 'YYYY-MM-DD') Test_Date
            FROM Lab_Results
            WHERE Visit_ID = rec.Visit_ID
        ) LOOP
            v_summary := v_summary || '  * Lab Result: ' || l.Test_Name || ' = ' || l.Result_Value || 
                         ' (Normal Range: ' || l.Normal_Range || '), Date: ' || l.Test_Date || CHR(10);
        END LOOP;
    END LOOP;

    -- Allergies
    v_summary := v_summary || CHR(10) || 'Allergies:' || CHR(10);
    FOR a IN (
        SELECT Allergen, Severity, Notes
        FROM Allergies
        WHERE Patient_ID = p_patient_id
    ) LOOP
        v_summary := v_summary || '- ' || a.Allergen || ' (Severity: ' || a.Severity || ')';
        IF a.Notes IS NOT NULL THEN
            v_summary := v_summary || ', Notes: ' || a.Notes;
        END IF;
        v_summary := v_summary || CHR(10);
    END LOOP;

    -- Vaccinations
    v_summary := v_summary || CHR(10) || 'Vaccinations:' || CHR(10);
    FOR v IN (
        SELECT Vaccine_Name, Dose_Number, TO_CHAR(Administered_Date, 'YYYY-MM-DD') Administered_Date
        FROM Vaccinations
        WHERE Patient_ID = p_patient_id
        ORDER BY Administered_Date DESC
    ) LOOP
        v_summary := v_summary || '- ' || v.Vaccine_Name || ', Dose: ' || v.Dose_Number || ', Date: ' || v.Administered_Date || CHR(10);
    END LOOP;

    RETURN v_summary;
END;
/
SET SERVEROUTPUT ON SIZE UNLIMITED;

DECLARE
    v_summary CLOB;
BEGIN
    v_summary := get_patient_summary(5); 
    DBMS_OUTPUT.PUT_LINE(v_summary);
END;
/





⚙️ 1. Query Optimization Techniques Used
✅ 1.1 Bulk Data Insertion
- Inserted multiple records in one statement using comma-separated VALUES, which minimized network round-trips and parsing overhead.
 Reduces network round-trips and parsing overhead, making data seeding faster and smoother during system initialization.
- This technique was applied during seeding of hospital, doctor, patient, visit, and vaccination tables.

✅ 1.3 Common Table Expressions (CTEs)
- CTEs used in lab result analysis and trend detection:
- Broke complex logic into readable subqueries.
- Enabled intermediate result caching.
- Simplified condition management.
✅ 1.4 Use of NOT EXISTS Instead of NOT IN
- What we did: Used NOT EXISTS to identify patients missing required vaccinations (MMR) rather than NOT IN.
- Why it helps: NOT EXISTS handles NULL-safely and avoids unnecessary intermediate sets.
- Plan Insight: Both had identical execution plans in small datasets, but NOT EXISTS offers superior resilience in larger, messy data environments.

- Queries checking for missing vaccinations were rewritten to use NOT EXISTS.
- Prevents issues related to NULL values.
- Produces more reliable and potentially faster execution.
✅ 1.5 Targeted Column Selection
- Avoided SELECT * when only specific columns were required.
- Reduced unnecessary data retrieval, lowering CPU and memory consumption.
 Why it helps: Limits data fetch to only needed columns, reducing I/O load and memory usage.
1.4 Window Functions for Trend Analysis
- Used LAG() in lab test history tracking to compare results over time efficiently.
- Replaced slower self-join strategies with partitioned windows.
1.5 String Matching Logic
- Performed LOWER(...) LIKE '%' || LOWER(...) || '%' for allergy-to-medication comparisons.
- Though not index-friendly, this flexible approach handles inconsistent data entries

✅ Logical Case Flags
- Flags like Chronic_Medication_Flag help precompute business logic during ETL or view creation.
- These reduce runtime CPU cost during analytics or dashboard queries.

4. Materialized View Usage
- What to explain: You created Patient_History_Snapshot to consolidate patient metrics, recent activity, and derived insights (e.g., age, chronic medication flag).
- Performance angle: Materialized views reduce the need for expensive live joins and aggregations during repetitive reporting.
- Enhancement: Discuss refresh strategy—e.g., on-demand, scheduled, or fast refresh—and its impact on resource usage.

5. Denormalization Strategy for Reporting
- Context: You’re combining diverse data sources (e.g., lab results, allergies, prescriptions) into a single unified view.
- Benefit: Speeds up analytics, especially for dashboards and snapshots that don’t need real-time precision.
- Note: Include trade-offs—denormalization can cause data redundancy but offers performance gains for read-heavy scenarios.

🧠 2. Indexing and Partitioning Strategies
✅ 2.1 Indexing
- Manually added indexes to frequently filtered or joined columns:
- Patients(DOB)
- Prescriptions(Medicine_ID)
- Visits(Patient_ID)
- Vaccinations(Patient_ID, Vaccine_Name)
- Observed INDEX RANGE SCAN in execution plans following this change.
✅ 2.2 Partitioning (Future Scope)
- While Oracle Live SQL doesn't support partitioning, the system design encourages partitioning lab results and visit records by Test_Date or Visit_Date in production environments.
- Expected benefit: Improved performance for time-range queries and archive retrievals.


5. Recommendations for Future Enhancements
- Add composite indexes to cover frequent join chains (e.g., Visit_ID, Test_Name)
- Standardize allergen terminology using lookup or tag-based matching
- Implement refresh strategies for materialized views (scheduled vs fast refresh)
- Introduce dynamic parameters and views to support department-wise filtering or condition-specific analytics
- Use stored procedures for recurring tasks like annual vaccination audits or chronic

1. Use of Constraints with Validation Logic
- Check constraints on columns like Contact, Email, Gender, Severity, and Dose_Number prevent invalid input.
- Avoids downstream errors and saves cleanup effort later.
✅ 2. Smart Foreign Key Strategies
- ON DELETE CASCADE on dependent tables ensures referential integrity and simplifies bulk deletions.
- ON DELETE SET NULL protects historical records (e.g. Visits) if linked doctors/patients are removed, retaining auditability.
✅ 3. Identity Columns for Key Generation
- Use of GENERATED ALWAYS AS IDENTITY eliminates manual primary key handling, reducing insert complexity and collision risk.
✅ 4. Exception Handling in Table Creation
- EXECUTE IMMEDIATE wrapped in PL/SQL blocks with proper error catching streamlines deployment in repeat runs.
- Makes schema scripts idempotent and portable.


 1. Validated Insertion via Procedure: Add_Lab_Result
What it does:
- Confirms the existence of a corresponding Visit_ID before inserting lab results.
Optimization Benefits:
- Prevents invalid data from polluting the Lab_Results table.
- Avoids potential cascading referential errors later in reporting and analysis.
- Uses RAISE_APPLICATION_ERROR for clear exception messages without crashing the session.
- Supports atomic transactions (COMMIT post-insertion).
Suggested Improvement:
- Use EXISTS with ROWNUM = 1 instead of COUNT(*) for faster check performance.
- Add exception handling for duplicates or overlapping tests by the same patient if needed.

✅ 2. Trigger: prevent_duplicate_allergy
What it does:
- Stops insertion of allergy records if the patient already has that allergen (case-insensitive).
Optimization Benefits:
- Enforces business logic constraint where SQL’s native UNIQUE isn’t usable due to case sensitivity.
- Reduces redundancy in allergy matching logic during query operations.
- Protects analytics quality by maintaining distinct patient allergy profiles.
Suggested Improvement:
- If supported, add a function-based index: LOWER(Patient_ID || Allergen) to speed up the duplicate check.
- Use SELECT 1 WHERE ROWNUM = 1 instead of COUNT(*) for reduced scan overhead.


Certainly! Here's a refined explanation of the DDL-level performance and integrity features you implemented in your Electronic Health Record system, presented in paragraph form for your report:
Your schema design incorporates several well-considered strategies to ensure both performance and data integrity. Throughout the DDL, you employed a rich mix of constraints—such as CHECK, PRIMARY KEY, UNIQUE, and FOREIGN KEY definitions—which enforce business rules directly at the database level. These constraints safeguard against invalid data entries, such as ensuring contact numbers match expected digit counts, validating email formats, and restricting gender or severity inputs to predefined values. This immediate validation streamlines application logic by shifting error checking to the database layer.
Foreign key relationships are crafted with cascading behaviors that strengthen referential integrity. For instance, ON DELETE CASCADE ensures that dependent records like visits or prescriptions are automatically removed when their parent entity is deleted, preventing orphaned data. Meanwhile, ON DELETE SET NULL is used judiciously in cases where historical tracking—such as retaining visit records even after a patient or doctor is removed—is beneficial for audits and analytics. These strategies balance data integrity with retention of critical historical insights.
Your use of GENERATED ALWAYS AS IDENTITY for primary key generation across all major entities (patients, doctors, visits, etc.) eliminates the need for manual sequencing and helps ensure scalability in multi-user environments. This approach simplifies inserts and avoids key collisions, especially in concurrent transactions.
Table creation is wrapped in EXECUTE IMMEDIATE PL/SQL blocks with exception handling, making the scripts idempotent and reusable. This design anticipates reruns in development or deployment environments and gracefully handles preexisting tables using SQLCODE = -955 to skip creation errors. This contributes to smoother CI/CD integration or system upgrades.
Finally, your schema is partition-ready—particularly the Lab_Results table, which is structured to support future partitioning by Test_Date. This design anticipates performance optimization for large datasets, enabling faster range scans, pruning of irrelevant partitions, and more efficient archival operations when scaled to production-level volumes.
Altogether, your DDL-level design choices support not only structural robustness but also high-performance querying, reduced application burden, and future-proof scalability.




