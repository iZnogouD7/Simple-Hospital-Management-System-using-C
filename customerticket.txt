package com.TicketSystem.TicketSystem.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/admin")
@RequiredArgsConstructor
public class AdminController {
    private final AdminService adminService;

    @PostMapping("/support-staff")
    public ResponseEntity<?> createSupportStaff(@RequestBody SupportStaffRequestDto dto) {
        return adminService.createSupportStaff(dto);
    }

    @PutMapping("/support-staff/{id}")
    public ResponseEntity<?> updateSupportStaff(@PathVariable Long id, @RequestBody SupportStaffRequestDto dto) {
        return adminService.updateSupportStaff(id, dto);
    }

    @GetMapping("/support-staff")
    public ResponseEntity<?> viewSupportStaff() {
        return adminService.viewSupportStaff();
    }

    @PostMapping("/assign-ticket")
    public ResponseEntity<?> assignTicket(@RequestBody AssignTicketRequestDto dto) {
        return adminService.assignTicketToStaff(dto);
    }

    @GetMapping("/tickets")
    public ResponseEntity<?> viewAllTickets() {
        return adminService.viewAllIssuedTickets();
    }

    @GetMapping("/users")
    public ResponseEntity<?> viewAllUsers() {
        return adminService.viewAllRegisteredUsers();
    }

}

package com.TicketSystem.TicketSystem.controller;


import com.TicketSystem.TicketSystem.services.serviceImpl.AuthServiceImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {
    private final AuthServiceImpl authServiceImpl;

    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody RegisterRequestDto dto) {
        return authServiceImpl.register(dto);
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequestDto dto) {
        return authServiceImpl.login(dto);
    }

    @PostMapping("/logout")
    public ResponseEntity<?> logout() {
        return authServiceImpl.logout();
    }
}
package com.TicketSystem.TicketSystem.controller;


import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/staff")
@RequiredArgsConstructor
public class SupportStaffController {
    private final SupportStaffService supportStaffService;

    @GetMapping("/tickets")
    public ResponseEntity<?> viewAssignedTickets() {
        return supportStaffService.viewAssignedTickets();
    }

    @PutMapping("/tickets/{id}/status")
    public ResponseEntity<?> updateTicketStatus(@PathVariable Long id, @RequestBody String newStatus) {
        return supportStaffService.updateTicketStatus(id, newStatus);
    }
}
package com.TicketSystem.TicketSystem.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/tickets")
@RequiredArgsConstructor
public class TicketController {
    private final TicketService ticketService;

    @PostMapping
    public ResponseEntity<?> createTicket(@RequestBody TicketRequestDto dto) {
        return ticketService.createTicket(dto);
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateTicket(@PathVariable Long id, @RequestBody TicketRequestDto dto) {
        return ticketService.updateTicket(id, dto);
    }

    @GetMapping
    public ResponseEntity<?> viewAllTickets() {
        return ticketService.viewAllTickets();
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> viewTicket(@PathVariable Long id) {
        return ticketService.viewTicket(id);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteTicket(@PathVariable Long id) {
        return ticketService.deleteTicket(id);
    }
}
Servcie
package com.TicketSystem.TicketSystem.services.serviceImpl;


import com.TicketSystem.TicketSystem.repositories.RoleRepository;
import com.TicketSystem.TicketSystem.repositories.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuthServiceImpl {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;

    public ResponseEntity<?> register(RegisterRequestDto dto) {
        Role role = roleRepository.findByRoleName("CUSTOMER")
                .orElseThrow(() -> new RuntimeException("Role not found"));

        User user = User.builder()
                .fullName(dto.getFullName())
                .email(dto.getEmail())
                .password(passwordEncoder.encode(dto.getPassword()))
                .address(dto.getAddress())
                .contactNo(dto.getContactNo())
                .status(UserStatus.ACTIVE)
                .role(role)
                .build();

        userRepository.save(user);
        return ResponseEntity.ok("User registered successfully");
    }

    public ResponseEntity<?> login(LoginRequestDto dto) {
        // Stub logic â€“ normally, you'd authenticate and generate JWT token here
        return ResponseEntity.ok("Login successful (stub)");
    }

    public ResponseEntity<?> logout() {
        // Stub logic for logout
        return ResponseEntity.ok("Logout successful (stub)");
    }
}
package com.TicketSystem.TicketSystem.services.serviceImpl;

import com.TicketSystem.TicketSystem.services.TicketService;

public class TicketServiceImpl implements TicketService {
    private final TicketRepository ticketRepository;
    private final UserRepository userRepository;
    private final TicketTypeRepository ticketTypeRepository;

    public ResponseEntity<?> createTicket(TicketRequestDto dto) {
        User user = userRepository.findById(dto.getUserId()).orElseThrow();
        TicketType ticketType = ticketTypeRepository.findById(dto.getTicketTypeId()).orElseThrow();

        Ticket ticket = Ticket.builder()
                .title(dto.getTitle())
                .description(dto.getDescription())
                .priority(dto.getPriority())
                .status(TicketStatus.OPEN)
                .user(user)
                .ticketType(ticketType)
                .build();

        ticketRepository.save(ticket);
        return ResponseEntity.ok(ticket);
    }

    public ResponseEntity<?> updateTicket(Long id, TicketRequestDto dto) {
        Ticket ticket = ticketRepository.findById(id).orElseThrow();
        ticket.setTitle(dto.getTitle());
        ticket.setDescription(dto.getDescription());
        ticket.setPriority(dto.getPriority());
        ticketRepository.save(ticket);
        return ResponseEntity.ok(ticket);
    }

    public ResponseEntity<?> viewAllTickets() {
        List<Ticket> tickets = ticketRepository.findAll();
        return ResponseEntity.ok(tickets);
    }

    public ResponseEntity<?> viewTicket(Long id) {
        Ticket ticket = ticketRepository.findById(id).orElseThrow();
        return ResponseEntity.ok(ticket);
    }

    public ResponseEntity<?> deleteTicket(Long id) {
        ticketRepository.deleteById(id);
        return ResponseEntity.ok("Ticket deleted successfully");
    }
}
models
package com.TicketSystem.TicketSystem.models;

import com.TicketSystem.TicketSystem.base.BaseEntity;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.*;

@Entity
@Table(name = "Roles_Table")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Role extends BaseEntity {
    private String roleName;

//    private List<User> user;
}
package com.TicketSystem.TicketSystem.models;

import jakarta.persistence.*;

@Entity
@Table(name = "Support_Staff_Table")
public class SupportStaff {
    @Id
    private Long id;

    @OneToOne
    @MapsId
    @JoinColumn(name = "User_Id")
    private User user;

    private boolean isAvailable;
}
package com.TicketSystem.TicketSystem.models;

import com.TicketSystem.TicketSystem.base.AuditBaseEntity;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "Tickets_Table")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Ticket extends AuditBaseEntity {
    private String title;
    private String description;

    @Enumerated(EnumType.STRING)
    private TicketStatus status;

    @ManyToOne
    @JoinColumn(name = "ticket_type_id")
    private TicketType ticketType;


    @Enumerated(EnumType.STRING)
    private TicketPriority priority;

    @ManyToOne
    @JoinColumn(name = "customer_id")
    private User user;

    @ManyToOne
    @JoinColumn(name = "support_staff_id")
    private SupportStaff supportStaff;
}
package com.TicketSystem.TicketSystem.models;

public enum TicketPriority {
    LOW,
    MEDIUM,
    HIGH
}
package com.TicketSystem.TicketSystem.models;

public enum TicketStatus {
    PENDING,
    IN_PROGRESS,
    RESOLVED,
    CLOSED
}
package com.TicketSystem.TicketSystem.models;

import com.TicketSystem.TicketSystem.base.BaseEntity;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.*;

@Entity
@Table(name = "Ticket_Type_Table")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TicketType extends BaseEntity {
    private String type;
}
package com.TicketSystem.TicketSystem.models;

import com.TicketSystem.TicketSystem.base.AuditBaseEntity;
import jakarta.persistence.*;
import lombok.*;

import java.util.List;

@Entity
@Table(name = "Users_Table")
//@Data
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class User extends AuditBaseEntity {
    private String fullName;
    private String email;
    private String password;
    private String address;
    private String contactNo;

    @ManyToOne
    @JoinColumn(name = "role_id")
    private Role role;

    @OneToMany(mappedBy = "user")
    private List<Ticket> customerTicket;

    @Enumerated(EnumType.STRING)
    private UserStatus status;
}
package com.TicketSystem.TicketSystem.models;

//public class UserStatus {
//}
public enum UserStatus{
    ACTIVE,INACTIVE,BLOCKED
}
package com.example.CustomerSupportTicket.controllers;

import com.example.CustomerSupportTicket.base.APIResponse;
import com.example.CustomerSupportTicket.dtos.requestdto.RegisterRequestDto;
import com.example.CustomerSupportTicket.dtos.responsedto.*;
import com.example.CustomerSupportTicket.services.AdminService;
import com.example.CustomerSupportTicket.utils.ResponseUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/admin")
@RequiredArgsConstructor
public class AdminController {

    private final AdminService adminService;

    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/create-staff")
    public ResponseEntity<APIResponse<NewStaffResponseDto>> createStaffUser(@RequestBody RegisterRequestDto reqDto) {
        if (reqDto == null) {
            throw new NullPointerException("Empty....!!");
        }
        NewStaffResponseDto responseDto = adminService.createStaffUser(reqDto);
        return ResponseUtil.success(responseDto, "Staff Created Successfully", HttpStatus.CREATED);
    }

    @GetMapping("/staff")
    public ResponseEntity<APIResponse<List<UserResDto>>> getAllStaff(){

        List<UserResDto> resDtoList = adminService.getAllStaff();

        return ResponseUtil.success(resDtoList,"Staff Fetch Successfully",HttpStatus.OK);
    }

    @GetMapping("/staff/{id}")
    public ResponseEntity<APIResponse<UserDetailResDto>> getStaffById(@PathVariable Long id){
        UserDetailResDto resDto = adminService.getStaffById(id);
        return ResponseUtil.success(resDto,"Staff Fetch Successfully",HttpStatus.OK);
    }



    @PutMapping("/staff/{id}")
    public ResponseEntity<APIResponse<UserDetailResDto>> updateStaffUser(){

        return null;
    }


    @GetMapping("/tickets")
    public ResponseEntity<APIResponse<List<TicketResDto>>> getAllTickets() {
        List<TicketResDto> resDtoList = adminService.getAllTickets();

        return ResponseUtil.success(resDtoList, "All Tickets", HttpStatus.OK);
    }

    @GetMapping("/ticket/{id}")
    public ResponseEntity<APIResponse<TicketDetailResDto>> getTicketById(@PathVariable Long id) {
        TicketDetailResDto resDtoList = adminService.getTicketById(id);

        return ResponseUtil.success(resDtoList, "All Tickets", HttpStatus.OK);
    }


    @PutMapping("/ticket/{id}/assign/{staffId}")
    public ResponseEntity<APIResponse<TicketDetailResDto>> assignTicket(@PathVariable Long id,
    @PathVariable Long staffId) {
       TicketDetailResDto resDto =  adminService.assignTicket(id, staffId);
            return ResponseUtil.success(resDto, "Ticket Assigned", HttpStatus.OK);
//        return ResponseUtil.error(null,"Error Occurred", HttpStatus.BAD_REQUEST);
    }

    @GetMapping("/users")
    public ResponseEntity<APIResponse<List<UserResDto>>> getAllCustomers(){
        List<UserResDto> resDtoList = adminService.getAllCustomer();

        return ResponseUtil.success(resDtoList,"Customers Fetch Successfully",HttpStatus.OK);
    }

    @GetMapping("/users/{id}")
    public ResponseEntity<APIResponse<UserDetailResDto>> getCustomerById(@PathVariable Long id){
        UserDetailResDto resDto = adminService.getCustomerById(id);
        return ResponseUtil.success(resDto,"Customer Fetch Successfully",HttpStatus.OK);
    }
}







import com.fasterxml.jackson.databind.ObjectMapper;
import com.ragnar.main.API.DTOs.Auth.LoginDTO;
import com.ragnar.main.API.DTOs.Book.CreateBookDTO;
import com.ragnar.main.Application.IRepositories.IUserRepository;
import com.ragnar.main.Application.IServices.IAuthService;
import com.ragnar.main.Domain.Enums.GenreType;
import com.ragnar.main.Util.Helpers.DateHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
 
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
class BookControllerTest {
    @Autowired
    private MockMvc mvc;
 
    @Autowired
    private ObjectMapper mapper;
 
    @Autowired
    private IUserRepository userRepository;
 
    @Autowired
    private IAuthService authService;
 
    private String jwtToken;
 
    @BeforeEach
    void setup() {
        var model = LoginDTO.builder()
                .username("superadmin")
                .password("superadmin@123")
                .build();
        var response = authService.LoginUser(model);
        jwtToken = response.getData().getToken();
    }
 
    @Test
    void createBook() throws Exception {
        var dto = CreateBookDTO.builder()
                .bookName("Test Book")
                .publicationYear(DateHelper.ParseDate("2025-06-24"))
                .Genre(GenreType.ACTION)
                .Price(1000)
                .authorId(1L)
                .build();
 
        mvc.perform(MockMvcRequestBuilders
            .post("/api/v1/Book")
            .header("Authorization", "Bearer " + jwtToken)
            .contentType(MediaType.APPLICATION_JSON)
            .content(mapper.writeValueAsString(dto))
        )
        .andExpect(status().isOk())
        .andExpect(jsonPath("$.success").value(true))
        .andExpect(jsonPath("$.data").exists());
    }
 
    @Test
    void getAllBooks() {
    }
 
    @Test
    void deleteBook() {
    }
}
--------------------------------------------------------------------
//package com.example.CustomerSupportTicket.controllers;
//
//import com.example.CustomerSupportTicket.dtos.requestdto.LoginReqDto;
//import com.example.CustomerSupportTicket.dtos.requestdto.RegisterRequestDto;
//import com.fasterxml.jackson.databind.ObjectMapper;
//import org.junit.jupiter.api.BeforeEach;
//import org.junit.jupiter.api.Test;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
//import org.springframework.boot.test.context.SpringBootTest;
//import org.springframework.http.MediaType;
//import org.springframework.test.context.ActiveProfiles;
//import org.springframework.test.web.servlet.MockMvc;
//import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
//
//import static org.junit.jupiter.api.Assertions.*;
//import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
//
//@SpringBootTest
//@AutoConfigureMockMvc
//@ActiveProfiles("test")
//public class AdminControllerTest {
//    @Autowired
//    private MockMvc mvc;
//
//    @Autowired
//    private ObjectMapper mapper;
//
//    private String jwtToken;
//    @Test
//    void contextLoads() {}
//    @BeforeEach
//    void setup() throws Exception {
//        var registerDto = new RegisterRequestDto("Admin", "admin@admin.com", "admin123", "Ktm", "9811111111");
//        mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/create-user")
//                .contentType(MediaType.APPLICATION_JSON)
//                .content(mapper.writeValueAsString(registerDto)));
//
//        var loginDto = new LoginReqDto("admin@admin.com", "admin123");
//        var loginResponse = mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/login")
//                        .contentType(MediaType.APPLICATION_JSON)
//                        .content(mapper.writeValueAsString(loginDto)))
//                .andReturn().getResponse().getContentAsString();
//
//        jwtToken = mapper.readTree(loginResponse).get("data").get("token").asText();
//    }
//    @Test
//    void createStaffUser() throws Exception{
//        var registerDto = new RegisterRequestDto("Staff Name", "staff@example.com", "staff123", "Kathmandu", "9800000000");
//
//        mvc.perform(MockMvcRequestBuilders.post("/api/v1/admin/create-staff")
//                        .header("Authorization", "Bearer " + jwtToken)
//                        .contentType(MediaType.APPLICATION_JSON)
//                        .content(mapper.writeValueAsString(registerDto)))
//                .andExpect(status().isCreated())
//                .andExpect(jsonPath("$.message").value("Staff Created Successfully"))
//                .andExpect(jsonPath("$.data").exists());
//    }
//
//    @Test
//    void getAllStaff() throws Exception {
//        mvc.perform(MockMvcRequestBuilders.get("/api/v1/admin/staff")
//                        .header("Authorization", "Bearer " + jwtToken))
//                .andExpect(status().isOk())
//                .andExpect(jsonPath("$.message").value("Staff Fetch Successfully"));
//    }
//
//    @Test
//    void getStaffById() throws Exception{
//        mvc.perform(MockMvcRequestBuilders.get("/api/v1/admin/staff/1")
//                        .header("Authorization", "Bearer " + jwtToken))
//                .andExpect(status().isOk())
//                .andExpect(jsonPath("$.message").value("Staff Fetch Successfully"));
//    }
//
//    @Test
//    void assignTicket() throws Exception{
//        mvc.perform(MockMvcRequestBuilders.put("/api/v1/admin/ticket/1/assign/2")
//                        .header("Authorization", "Bearer " + jwtToken))
//                .andExpect(status().isOk())
//                .andExpect(jsonPath("$.message").value("Ticket Assigned"));
//    }
//}

package com.example.CustomerSupportTicket.controllers;
import com.example.CustomerSupportTicket.dtos.requestdto.LoginReqDto;
import com.example.CustomerSupportTicket.dtos.requestdto.RegisterRequestDto;
import com.example.CustomerSupportTicket.models.Role;
import com.example.CustomerSupportTicket.repositories.RoleRepository;
import com.example.CustomerSupportTicket.repositories.UserRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
class AdminControllerTest {

    @Autowired
    private MockMvc mvc;

    @Autowired
    private ObjectMapper mapper;

    private String adminToken;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private RoleRepository roleRepository;
    @BeforeEach
    void setupAdmin() throws Exception {
        // Register Admin
        Role adminRole=roleRepository.findByRoleName("ADMIN");
        if (adminRole == null) {
            adminRole = new Role();
            adminRole.setRoleName("ADMIN");
            roleRepository.save(adminRole);
        }
        var adminDto = new RegisterRequestDto(
                "Super Admin",
                "admin@example.com",
                "admin123",
                "KTM",
                "9800000000"
        );

        mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/create-user")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(adminDto)));

        // Login Admin
        var loginDto = new LoginReqDto("admin@example.com", "admin123");
        var loginRes = mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(loginDto)))
                .andReturn().getResponse().getContentAsString();

        adminToken = mapper.readTree(loginRes).get("data").get("token").asText();
    }

    @Test
    void getAllStaff() throws Exception {
        mvc.perform(MockMvcRequestBuilders.get("/api/v1/admin/staff")
                        .header("Authorization", "Bearer " + adminToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Staff Fetch Successfully"));
    }
}



package com.example.CustomerSupportTicket.controllers;

import com.example.CustomerSupportTicket.dtos.requestdto.LoginReqDto;
import com.example.CustomerSupportTicket.dtos.requestdto.RegisterRequestDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.junit.jupiter.api.Assertions.*;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
public class AuthControllerTest {
    @Autowired
    private MockMvc mvc;

    @Autowired
    private ObjectMapper mapper;
    @Test
    void createNewUser() throws Exception{
        var registerDto = new RegisterRequestDto("User Name", "user@example.com", "user123", "Pokhara", "9811111111");

        mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/create-user")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(registerDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.message").value("User Created Successfully"))
                .andExpect(jsonPath("$.data").exists());
    }

    @Test
    void loginUser() throws Exception {
        var loginDto = new LoginReqDto("user@example.com", "user123");

        mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(loginDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Login Successfull"))
                .andExpect(jsonPath("$.data.token").exists());
    }
}



package com.example.CustomerSupportTicket.controllers;

import com.example.CustomerSupportTicket.dtos.requestdto.LoginReqDto;
import com.example.CustomerSupportTicket.dtos.requestdto.RegisterRequestDto;
import com.example.CustomerSupportTicket.dtos.requestdto.TicketStatusReqDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
public class StaffControllerTest {
    @Autowired
    private MockMvc mvc;

    @Autowired
    private ObjectMapper mapper;

    private String jwtToken;
    void setup() throws Exception {
        var registerDto = new RegisterRequestDto("Staff User", "staff@staff.com", "staff123", "Pokhara", "9810000000");
        mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/create-user")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(registerDto)));

        var loginDto = new LoginReqDto("staff@staff.com", "staff123");
        var loginResponse = mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(loginDto)))
                .andReturn().getResponse().getContentAsString();

        jwtToken = mapper.readTree(loginResponse).get("data").get("token").asText();
    }

    @Test
    void getAssignedTickets() throws Exception {
        mvc.perform(MockMvcRequestBuilders.get("/api/v1/staff/tickets")
                        .header("Authorization", "Bearer " + jwtToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Tickets Fetch Successful"));
    }

    @Test
    void getTicketById() throws Exception {
        mvc.perform(MockMvcRequestBuilders.get("/api/v1/staff/ticket/1")
                        .header("Authorization", "Bearer " + jwtToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Ticket Fetched"));
    }

    @Test
    void updateTicketStatus() throws Exception{
        var statusDto = new TicketStatusReqDto("RESOLVED");

        mvc.perform(MockMvcRequestBuilders.put("/api/v1/staff/ticket/1")
                        .header("Authorization", "Bearer " + jwtToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(statusDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Ticket Updated Successfully"));
    }
}



package com.example.CustomerSupportTicket.controllers;

import com.example.CustomerSupportTicket.dtos.requestdto.LoginReqDto;
import com.example.CustomerSupportTicket.dtos.requestdto.RegisterRequestDto;
import com.example.CustomerSupportTicket.dtos.requestdto.TicketReqDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
public class TicketControllerTest {
    @Autowired
    private MockMvc mvc;

    @Autowired
    private ObjectMapper mapper;

    private String jwtToken;
    @BeforeEach
    void setup() throws Exception {
        // Register admin user
        var registerDto = new RegisterRequestDto("Admin User", "admin@example.com", "admin123", "Kathmandu", "9800000000");
        mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/create-user")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(registerDto)))
                .andExpect(status().isCreated());

        // Login admin user
        var loginDto = new LoginReqDto("admin@example.com", "admin123");
        String loginContent = mapper.writeValueAsString(loginDto);
        var result = mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(loginContent))
                .andExpect(status().isOk())
                .andReturn();

        jwtToken = mapper.readTree(result.getResponse().getContentAsString())
                .get("data").get("token").asText();
    }

    @Test
    void createTicket() throws Exception{
        var ticketDto = new TicketReqDto("Title", "Desc", "Bug", "High");

        mvc.perform(MockMvcRequestBuilders.post("/api/v1/ticket")
                        .header("Authorization", "Bearer " + jwtToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(ticketDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.message").value("Ticket Created"));
    }
}


package com.example.CustomerSupportTicket.controllers;

import com.example.CustomerSupportTicket.dtos.requestdto.LoginReqDto;
import com.example.CustomerSupportTicket.dtos.requestdto.RegisterRequestDto;
import com.example.CustomerSupportTicket.dtos.requestdto.TicketReqDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
public class UserControllerTest {
    @Autowired
    private MockMvc mvc;

    @Autowired
    private ObjectMapper mapper;

    private String jwtToken;
    private Long ticketId;
    @BeforeEach
    void setup() throws Exception {
        var registerDto = new RegisterRequestDto("Customer User", "customer@example.com", "cust123", "Bhaktapur", "9808888888");
        mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/create-user")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(registerDto)));

        var loginDto = new LoginReqDto("customer@example.com", "cust123");
        var loginResponse = mvc.perform(MockMvcRequestBuilders.post("/api/v1/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(loginDto)))
                .andReturn().getResponse().getContentAsString();

        jwtToken = mapper.readTree(loginResponse).get("data").get("token").asText();
        // Create a new ticket
        var ticketDto = new TicketReqDto("Test Ticket", "This is a test", "Bug", "HIGH");
        var createResponse = mvc.perform(MockMvcRequestBuilders.post("/api/v1/ticket")
                        .header("Authorization", "Bearer " + jwtToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(ticketDto)))
                .andReturn().getResponse().getContentAsString();
        System.out.println("Create Response: " + createResponse);

        // Save created ticket ID for use in tests
        ticketId = mapper.readTree(createResponse).get("data").get("id").asLong();
    }
    @Test
    void getAllTicket() throws Exception{
        mvc.perform(MockMvcRequestBuilders.get("/api/v1/customer/tickets")
                        .header("Authorization", "Bearer " + jwtToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").exists());
    }

    @Test
    void getTicketById() throws Exception{
        mvc.perform(MockMvcRequestBuilders.get("/api/v1/customer/ticket/"+ticketId)
                        .header("Authorization", "Bearer " + jwtToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Ticket fetch Success"));

    }

    @Test
    void updateTicket() throws Exception{
        var updateDto = new TicketReqDto("Updated Title", "Updated Description", "Bug", "MEDIUM");

        mvc.perform(MockMvcRequestBuilders.put("/api/v1/customer/ticket/"+ticketId)
                        .header("Authorization", "Bearer " + jwtToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(mapper.writeValueAsString(updateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Ticket Updated Successfully"));
    }

    @Test
    void deleteTicket() throws Exception{
        mvc.perform(MockMvcRequestBuilders.delete("/api/v1/customer/ticket/"+ticketId)
                        .header("Authorization", "Bearer " + jwtToken))
                .andExpect(status().isNoContent())
                .andExpect(jsonPath("$.message").value("Ticket Deleted Successfully"));
    }
}

