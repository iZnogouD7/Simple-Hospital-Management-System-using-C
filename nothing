
    # NEW METHODS FOR CART ITEM MANAGEMENT
    def get_cart_items(self):
        """Get all items in cart with their details"""
        cart_items = []
        item_containers = self.find_elements((By.CLASS_NAME, 'cart_item'))
        
        for container in item_containers:
            item_details = {
                'name': container.find_element(By.CLASS_NAME, 'inventory_item_name').text,
                'description': container.find_element(By.CLASS_NAME, 'inventory_item_desc').text,
                'price': container.find_element(By.CLASS_NAME, 'inventory_item_price').text,
                'quantity': container.find_element(By.CLASS_NAME, 'cart_quantity').text,
                'remove_button': container.find_element(By.XPATH, ".//button[starts-with(@id, 'remove-')]")
            }
            cart_items.append(item_details)
        
        return cart_items

    def remove_item_by_name(self, item_name):
        """Remove specific item from cart by name"""
        remove_button_locator = (By.XPATH, f"//div[@class='inventory_item_name' and text()='{item_name}']/ancestor::div[@class='cart_item']//button[starts-with(@id, 'remove-')]")
        self.click_element(remove_button_locator)
        print(f"Removed item from cart: {item_name}")

    def click_item_title_in_cart(self, item_name):
        """Click on item title in cart to go to item detail page"""
        item_title_locator = (By.XPATH, f"//div[@class='cart_item']//div[@class='inventory_item_name' and text()='{item_name}']")
        self.click_element(item_title_locator)
        print(f"Clicked on cart item title: {item_name}")

    def click_item_image_in_cart(self, item_name):
        """Click on item image in cart to go to item detail page"""
        item_image_locator = (By.XPATH, f"//div[@class='cart_item']//div[@class='inventory_item_name' and text()='{item_name}']/ancestor::div[@class='cart_item']//img")
        self.click_element(item_image_locator)
        print(f"Clicked on cart item image: {item_name}")

    def get_item_details_from_cart(self, item_name):
        """Get item details from cart for comparison"""
        cart_item = self.find_element((By.XPATH, f"//div[@class='inventory_item_name' and text()='{item_name}']/ancestor::div[@class='cart_item']"))
        
        details = {
            'name': cart_item.find_element(By.CLASS_NAME, 'inventory_item_name').text,
            'description': cart_item.find_element(By.CLASS_NAME, 'inventory_item_desc').text,
            'price': cart_item.find_element(By.CLASS_NAME, 'inventory_item_price').text,
            'quantity': cart_item.find_element(By.CLASS_NAME, 'cart_quantity').text
        }
        return details

    def remove_all_items_from_cart(self):
        """Remove all items from cart"""
        cart_items = self.get_cart_items()
        for item in cart_items:
            item['remove_button'].click()
            print(f"Removed {item['name']} from cart")

    def verify_cart_is_empty(self):
        """Verify that cart is empty"""
        try:
            cart_items = self.find_elements((By.CLASS_NAME, 'cart_item'))
            return len(cart_items) == 0
        except:
            return True


# New comprehensive test file: test_item_navigation.py
import pytest
import time
from Locators.alllocators import LoginPageLocators, ProductPageLocators
from Pages.LoginPage import LoginPage
from Pages.ProductPage import ProductPage
from Pages.CartPage import CartPage


@pytest.fixture()
def login_to_product_page(driver):
    login_page = LoginPage(driver)
    login_page.login(LoginPageLocators.valid_username, LoginPageLocators.valid_password)
    product_page = ProductPage(driver)
    print("User logged in and on product page")
    return product_page


@pytest.fixture()
def setup_cart_with_items(driver):
    login_page = LoginPage(driver)
    login_page.login(LoginPageLocators.valid_username, LoginPageLocators.valid_password)
    product_page = ProductPage(driver)
    
    # Add multiple items to cart
    product_page.add_single_item(ProductPageLocators.add_back_pack_path)
    product_page.add_single_item(ProductPageLocators.add_Jacket_path)
    product_page.click_on_cart_button()
    
    cart_page = CartPage(driver)
    print("Cart setup with items")
    return cart_page, product_page


def test_click_item_title_navigation(login_to_product_page):
    """Test clicking item title to navigate to detail page"""
    print("Testing item title click navigation")
    product_page = login_to_product_page
    
    # Get item details from inventory page
    item_name = "Sauce Labs Backpack"  # Adjust based on your actual item names
    inventory_details = product_page.get_item_details_from_inventory(item_name)
    
    # Click on item title
    product_page.click_item_by_name(item_name)
    time.sleep(2)
    
    # Verify navigation to detail page
    assert product_page.is_on_item_detail_page(), "Should be on item detail page"
    
    # Get details from detail page and verify they match
    detail_page_details = product_page.get_item_details_from_detail_page()
    assert product_page.verify_item_details_match(inventory_details, detail_page_details), \
        "Item details should match between inventory and detail pages"
    
    print("Item title navigation test passed")


def test_click_item_image_navigation(login_to_product_page):
    """Test clicking item image to navigate to detail page"""
    print("Testing item image click navigation")
    product_page = login_to_product_page
    
    item_name = "Sauce Labs Bike Light"  # Adjust based on your actual item names
    inventory_details = product_page.get_item_details_from_inventory(item_name)
    
    # Click on item image
    product_page.click_item_image_by_name(item_name)
    time.sleep(2)
    
    # Verify navigation and details match
    assert product_page.is_on_item_detail_page(), "Should be on item detail page"
    detail_page_details = product_page.get_item_details_from_detail_page()
    assert product_page.verify_item_details_match(inventory_details, detail_page_details), \
        "Item details should match between inventory and detail pages"
    
    print("Item image navigation test passed")


def test_add_remove_from_detail_page(login_to_product_page):
    """Test adding and removing items from detail page"""
    print("Testing add/remove from detail page")
    product_page = login_to_product_page
    
    # Navigate to item detail page
    item_name = "Sauce Labs Backpack"
    product_page.click_item_by_name(item_name)
    time.sleep(1)
    
    # Test adding item
    initial_cart_count = product_page.get_cart_count()
    product_page.add_item_from_detail_page()
    time.sleep(1)
    
    new_cart_count = product_page.get_cart_count()
    assert new_cart_count == initial_cart_count + 1, \
        f"Cart count should increase by 1. Expected: {initial_cart_count + 1}, Got: {new_cart_count}"
    
    # Test removing item
    product_page.remove_item_from_detail_page()
    time.sleep(1)
    
    final_cart_count = product_page.get_cart_count()
    assert final_cart_count == initial_cart_count, \
        f"Cart count should return to initial value. Expected: {initial_cart_count}, Got: {final_cart_count}"
    
    print("Add/remove from detail page test passed")


def test_back_to_products_navigation(login_to_product_page):
    """Test back to products button functionality"""
    print("Testing back to products navigation")
    product_page = login_to_product_page
    
    # Navigate to item detail page
    product_page.click_item_by_name("Sauce Labs Backpack")
    time.sleep(1)
    assert product_page.is_on_item_detail_page(), "Should be on item detail page"
    
    # Click back to products
    product_page.click_back_to_products()
    time.sleep(1)
    
    # Verify back on inventory page
    assert "inventory.html" in product_page.get_current_url(), \
        f"Should be back on inventory page. Current URL: {product_page.get_current_url()}"
    
    print("Back to products navigation test passed")


def test_cart_item_removal(setup_cart_with_items):
    """Test removing items from cart page"""
    print("Testing cart item removal")
    cart_page, product_page = setup_cart_with_items
    
    # Get initial cart items
    initial_cart_items = cart_page.get_cart_items()
    initial_count = len(initial_cart_items)
    assert initial_count > 0, "Cart should have items"
    
    # Remove one item
    item_to_remove = initial_cart_items[0]['name']
    cart_page.remove_item_by_name(item_to_remove)
    time.sleep(1)
    
    # Verify item was removed
    remaining_items = cart_page.get_cart_items()
    assert len(remaining_items) == initial_count - 1, \
        f"Cart should have one less item. Expected: {initial_count - 1}, Got: {len(remaining_items)}"
    
    # Verify specific item was removed
    remaining_names = [item['name'] for item in remaining_items]
    assert item_to_remove not in remaining_names, f"Item {item_to_remove} should be removed from cart"
    
    print("Cart item removal test passed")


def test_cart_item_title_navigation(setup_cart_with_items):
    """Test clicking item title in cart to navigate to detail page"""
    print("Testing cart item title navigation")
    cart_page, product_page = setup_cart_with_items
    
    # Get cart items
    cart_items = cart_page.get_cart_items()
    assert len(cart_items) > 0, "Cart should have items"
    
    # Click on first item title
    item_name = cart_items[0]['name']
    cart_details = cart_page.get_item_details_from_cart(item_name)
    
    cart_page.click_item_title_in_cart(item_name)
    time.sleep(2)
    
    # Verify navigation to detail page
    assert product_page.is_on_item_detail_page(), "Should navigate to item detail page"
    
    # Verify item details match
    detail_page_details = product_page.get_item_details_from_detail_page()
    assert cart_details['name'] == detail_page_details['name'], "Item names should match"
    assert cart_details['price'] == detail_page_details['price'], "Item prices should match"
    
    print("Cart item title navigation test passed")


def test_cart_item_image_navigation(setup_cart_with_items):
    """Test clicking item image in cart to navigate to detail page"""
    print("Testing cart item image navigation")
    cart_page, product_page = setup_cart_with_items
    
    # Get cart items
    cart_items = cart_page.get_cart_items()
    assert len(cart_items) > 0, "Cart should have items"
    
    # Click on first item image
    item_name = cart_items[0]['name']
    cart_page.click_item_image_in_cart(item_name)
    time.sleep(2)
    
    # Verify navigation to detail page
    assert product_page.is_on_item_detail_page(), "Should navigate to item detail page from cart image"
    
    print("Cart item image navigation test passed")


def test_remove_all_items_from_cart(setup_cart_with_items):
    """Test removing all items from cart"""
    print("Testing remove all items from cart")
    cart_page, product_page = setup_cart_with_items
    
    # Verify cart has items initially
    initial_items = cart_page.get_cart_items()
    assert len(initial_items) > 0, "Cart should have items initially"
    
    # Remove all items
    cart_page.remove_all_items_from_cart()
    time.sleep(2)
    
    # Verify cart is empty
    assert cart_page.verify_cart_is_empty(), "Cart should be empty after removing all items"
    assert cart_page.get_cart_count() == 0, "Cart count should be 0"
    
    print("Remove all items from cart test passed")


def test_comprehensive_item_journey(login_to_product_page):
    """Test complete user journey: inventory -> detail -> cart -> detail -> back"""
    print("Testing comprehensive item journey")
    product_page = login_to_product_page
    
    # Step 1: Click item from inventory page
    item_name = "Sauce Labs Backpack"
    inventory_details = product_page.get_item_details_from_inventory(item_name)
    product_page.click_item_by_name(item_name)
    time.sleep(1)
    
    # Step 2: Verify detail page and add to cart
    assert product_page.is_on_item_detail_page(), "Should be on detail page"
    detail_details = product_page.get_item_details_from_detail_page()
    assert product_page.verify_item_details_match(inventory_details, detail_details), "Details should match"
    
    product_page.add_item_from_detail_page()
    assert product_page.get_cart_count() == 1, "Cart should have 1 item"
    
    # Step 3: Go to cart and verify item
    product_page.click_on_cart_button()
    time.sleep(1)
    cart_page = CartPage(product_page.driver)
    cart_items = cart_page.get_cart_items()
    assert len(cart_items) == 1, "Cart should have 1 item"
    assert cart_items[0]['name'] == item_name, "Cart item should match added item"
    
    # Step 4: Click item in cart to go back to detail page
    cart_page.click_item_title_in_cart(item_name)
    time.sleep(1)
    assert product_page.is_on_item_detail_page(), "Should be back on detail page"
    
    # Step 5: Remove item and go back to inventory
    product_page.remove_item_from_detail_page()
    assert product_page.get_cart_count() == 0, "Cart should be empty after removal"
    
    product_page.click_back_to_products()
    time.sleep(1)
    assert "inventory.html" in product_page.get_current_url(), "Should be back on inventory page"
    
    print("Comprehensive item journey test passed")



@pytest.fixture()
def setup_cart_page(driver):
    """Navigate to cart page with proper setup"""
    # Login
    login_page = LoginPage(driver)
    login_page.login(LoginPageLocators.valid_username, LoginPageLocators.valid_password)
    
    # Add item to cart (so cart has content)
    product_page = ProductPage(driver)
    product_page.add_single_item(ProductPageLocators.add_back_pack_path)
    
    # Navigate to cart page
    product_page.click_on_cart_button()
    
    # Return cart page and other page objects
    cart_page = CartPage(driver)
    other_page = OtherPage(driver)
    return cart_page, other_page

@pytest.mark.cart_menu_test
def test_cart_page_menu_comprehensive(setup_cart_page):
    """Comprehensive test of all menu functionality from cart page"""
    cart_page, menu = setup_cart_page
    
    # 1. Verify we're on cart page
    assert "cart.html" in menu.get_current_url(), f"Not on cart page. Current URL: {menu.get_current_url()}"
    
    # 2. Test menu button visibility
    assert menu.is_menu_button_displayed(), "Menu button not visible on cart page"
    
    # 3. Test menu opens
    menu.click_menu_button()
    assert menu.is_menu_sidebar_displayed(), "Menu sidebar not displayed after clicking menu button"
    
    # 4. Test All Items navigation
    menu.go_to_all_item()
    assert "inventory" in menu.get_current_url(), f"All Items didn't navigate to inventory. Got: {menu.get_current_url()}"
    
    # Return to cart page for next test
    menu.click_on_cart_button()
    assert "cart.html" in menu.get_current_url(), "Failed to return to cart page"
    
    # 5. Test About navigation
    menu.click_menu_button()
    menu.go_to_about()
    assert "saucelabs.com" in menu.get_current_url(), f"About didn't navigate to saucelabs.com. Got: {menu.get_current_url()}"
    
    # Return to cart page for next test
    driver.back()  # or navigate back to cart
    menu.click_on_cart_button()
    assert "cart.html" in menu.get_current_url(), "Failed to return to cart page after About"
    
    # 6. Test Reset App State
    initial_cart_count = menu.get_cart_count()
    assert initial_cart_count > 0, "Cart should have items before reset test"
    
    menu.click_menu_button()
    menu.reset_app_state()
    menu.click_menu_cancel()
    
    final_cart_count = menu.get_cart_count()
    assert final_cart_count == 0, f"Cart not reset. Expected 0, got {final_cart_count}"
    
    # 7. Test menu cancel functionality
    menu.click_menu_button()
    assert menu.is_menu_sidebar_displayed(), "Menu should be displayed before cancel test"
    
    menu.click_menu_cancel()
    assert not menu.is_menu_sidebar_displayed(), "Menu should be hidden after cancel"
    
    # 8. Test logout (do this last since it ends the session)
    menu.click_menu_button()
    menu.logout()
    assert menu.get_current_url() == LoginPageLocators.loginpageUrl, \
        f"Should be on login page after logout. Expected: {LoginPageLocators.loginpageUrl}, Got: {menu.get_current_url()}"


@pytest.mark.smoke
@pytest.mark.priority_high
@pytest.mark.order(1)

@pytest.mark.menu_functionality
@pytest.mark.login_functionality
@pytest.mark.cart_functionality



├── conftest.py
├── constants.py
├── locators/
│   ├── __init__.py
│   ├── base_locators.py
│   ├── cart_locators.py
│   └── product_locators.py
├── pages/
│   ├── __init__.py
│   ├── base_page.py
│   ├── cart_page.py
│   ├── checkout_page.py
│   └── product_page.py
├── test_data/
│   ├── __init__.py
│   └── products.py
├── utils/
│   ├── __init__.py
│   └── product_verifier.py
└── tests/
    ├── __init__.py
    ├── test_data_driven_flows.py
    └── test_smoke_flows.py
conftest:
import pytest
from selenium import webdriver
from constants import BASE_URL, STANDARD_USER

@pytest.fixture(scope="session")
def driver():
    """Fixture to initialize and cleanup WebDriver"""
    print("\nInitializing ChromeDriver...")
    driver = webdriver.Chrome()
    driver.maximize_window()
    driver.get(BASE_URL)
    yield driver
    print("\nClosing browser...")
    driver.quit()

@pytest.fixture
def login(driver):
    """Fixture to login once per test"""
    from pages.login_page import LoginPage
    print(f"\nLogging in as {STANDARD_USER[0]}...")
    LoginPage(driver).login(*STANDARD_USER)
    yield
    print("Login cleanup - no action needed")

@pytest.fixture
def clean_cart(driver):
    """Fixture to ensure cart is empty before test"""
    yield
    from pages.cart_page import CartPage
    print("\nCleaning up cart...")
    CartPage(driver).empty_cart()  # Implement this method in CartPage

# Application Constants
BASE_URL = "https://www.saucedemo.com/"
STANDARD_USER = ("standard_user", "secret_sauce")

# Timeouts
PAGE_LOAD_TIMEOUT = 15
ELEMENT_TIMEOUT = 10


from selenium.webdriver.common.by import By

class BaseLocators:
    """Shared locators across all pages"""
    MENU_BUTTON = (By.ID, "react-burger-menu-btn")
    CART_BADGE = (By.CLASS_NAME, "shopping_cart_badge")

from selenium.webdriver.common.by import By

class ProductLocators:
    """Locators for product listing and details"""
    
    @staticmethod
    def product_card_by_name(name):
        """Dynamic locator to find product container by name"""
        return (By.XPATH, f"//div[text()='{name}']/ancestor::div[@class='inventory_item']")
    
    # Product attributes
    NAME = (By.CLASS_NAME, "inventory_item_name")
    PRICE = (By.CLASS_NAME, "inventory_item_price")
    DESC = (By.CLASS_NAME, "inventory_item_desc")
    IMAGE = (By.CLASS_NAME, "inventory_item_img")
    ADD_BUTTON = (By.XPATH, ".//button[contains(@id,'add-to-cart')]")

from selenium.webdriver.common.by import By

class CartLocators:
    """Locators for cart page"""
    ITEM = (By.CLASS_NAME, "cart_item")
    CHECKOUT_BTN = (By.ID, "checkout")


from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from constants import ELEMENT_TIMEOUT

class BasePage:
    def __init__(self, driver):
        self.driver = driver
        self.wait = WebDriverWait(driver, ELEMENT_TIMEOUT)
    
    def find_element(self, locator):
        """Wait for and return a single element"""
        print(f"Looking for element: {locator}")
        return self.wait.until(EC.presence_of_element_located(locator))
    
    def find_elements(self, locator):
        """Wait for and return multiple elements"""
        print(f"Looking for multiple elements: {locator}")
        return self.wait.until(EC.presence_of_all_elements_located(locator))
    
    def click(self, locator):
        """Click on an element"""
        print(f"Clicking on: {locator}")
        self.find_element(locator).click()


from locators.product_locators import ProductLocators
from pages.base_page import BasePage

class ProductPage(BasePage):
    def get_product_details(self, product_name):
        """Extract product details from listing page"""
        print(f"\nGetting details for product: {product_name}")
        product_card = self.find_element(ProductLocators.product_card_by_name(product_name))
        
        details = {
            'name': product_card.find_element(*ProductLocators.NAME).text,
            'price': float(product_card.find_element(*ProductLocators.PRICE).text.replace('$', '')),
            'desc': product_card.find_element(*ProductLocators.DESC).text,
            'image': product_card.find_element(*ProductLocators.IMAGE).get_attribute('src')
        }
        print(f"Found product details: {details}")
        return details
    
    def add_product_by_name(self, product_name):
        """Add specific product to cart"""
        print(f"\nAdding product to cart: {product_name}")
        product_card = self.find_element(ProductLocators.product_card_by_name(product_name))
        product_card.find_element(*ProductLocators.ADD_BUTTON).click()
        print(f"Added {product_name} to cart")
        return self.get_product_details(product_name)


from locators.cart_locators import CartLocators
from pages.base_page import BasePage

class CartPage(BasePage):
    def get_cart_items(self):
        """Get all items in cart with details"""
        print("\nGetting cart items...")
        items = []
        for item in self.find_elements(CartLocators.ITEM):
            items.append({
                'name': item.find_element(*ProductLocators.NAME).text,
                'price': float(item.find_element(*ProductLocators.PRICE).text.replace('$', ''))
            })
        print(f"Found {len(items)} items in cart: {items}")
        return items
    
    def proceed_to_checkout(self):
        """Click checkout button"""
        print("\nProceeding to checkout...")
        self.click(CartLocators.CHECKOUT_BTN)

PRODUCT_TEST_DATA = {
    "Sauce Labs Backpack": {
        "name": "Sauce Labs Backpack",
        "price": 29.99,
        "desc": "carry.allTheThings() with the sleek, streamlined Sly Pack",
        "image": "sauce-backpack",
        "tax": 2.40,
        "total": 32.39
    },
    "Sauce Labs Bike Light": {
        "name": "Sauce Labs Bike Light",
        "price": 9.99,
        "desc": "A red light isn't the desired state in testing but it sure helps when riding your bike at night",
        "image": "bike-light",
        "tax": 0.80,
        "total": 10.79
    }
}


class ProductVerifier:
    @staticmethod
    def verify_product_details(actual: dict, expected: dict, page_name: str):
        """
        Verify product details match expected values
        Args:
            actual (dict): Details from page {'name': str, 'price': float, ...}
            expected (dict): Expected values from test data
            page_name (str): Page being verified (for error messages)
        """
        print(f"\nVerifying product on {page_name} page...")
        
        # Required fields
        assert actual['name'] == expected['name'], \
            f"{page_name} name mismatch. Expected {expected['name']}, got {actual['name']}"
        assert actual['price'] == expected['price'], \
            f"{page_name} price mismatch. Expected {expected['price']}, got {actual['price']}"
        
        # Optional fields
        if 'desc' in expected:
            assert actual['desc'] == expected['desc'], \
                f"{page_name} description mismatch"
        
        if 'image' in expected and 'image' in actual:
            assert expected['image'] in actual['image'], \
                f"{page_name} image mismatch. Expected {expected['image']} in {actual['image']}"
        
        print(f"All product details verified on {page_name} page!")


import pytest
from test_data.products import PRODUCT_TEST_DATA
from utils.product_verifier import ProductVerifier

@pytest.mark.smoke
def test_backpack_workflow(driver, login, clean_cart):
    """Smoke test for critical product (Backpack)"""
    print("\n=== Starting Backpack Smoke Test ===")
    
    # Setup
    product_page = ProductPage(driver)
    cart_page = CartPage(driver)
    expected = PRODUCT_TEST_DATA["Sauce Labs Backpack"]
    
    # 1. Verify Product Page
    product_details = product_page.get_product_details(expected['name'])
    ProductVerifier.verify_product_details(product_details, expected, "Product")
    
    # 2. Add to Cart
    product_page.add_product_by_name(expected['name'])
    
    # 3. Verify Cart
    cart_page.navigate()
    cart_items = cart_page.get_cart_items()
    ProductVerifier.verify_product_details(cart_items[0], expected, "Cart")
    
    print("=== Backpack Smoke Test Passed ===")


import pytest
from test_data.products import PRODUCT_TEST_DATA
from utils.product_verifier import ProductVerifier

@pytest.mark.parametrize("product_name", PRODUCT_TEST_DATA.keys(), 
                         ids=lambda x: x.replace(" ", "_"))
def test_all_products_flow(driver, login, clean_cart, product_name):
    """Data-driven test for all products"""
    print(f"\n=== Testing Product: {product_name} ===")
    
    # Setup
    product_page = ProductPage(driver)
    cart_page = CartPage(driver)
    expected = PRODUCT_TEST_DATA[product_name]
    
    # 1. Verify Product Page
    product_details = product_page.get_product_details(product_name)
    ProductVerifier.verify_product_details(product_details, expected, "Product")
    
    # 2. Add to Cart
    product_page.add_product_by_name(product_name)
    
    # 3. Verify Cart
    cart_page.navigate()
    cart_items = cart_page.get_cart_items()
    ProductVerifier.verify_product_details(cart_items[0], expected, "Cart")
    
    print(f"=== {product_name} Test Passed ===")







-- Procedure to add lab results with validation
CREATE OR REPLACE PROCEDURE Add_Lab_Result (
    p_Visit_ID NUMBER,
    p_Test_Name VARCHAR2,
    p_Result_Value NUMBER,
    p_Normal_Range VARCHAR2,
    p_Test_Date DATE
)
IS
    v_visit_exists NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_visit_exists FROM Visits WHERE Visit_ID = p_Visit_ID;
    
    IF v_visit_exists = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Visit ID does not exist');
    END IF;

    INSERT INTO Lab_Results (Result_ID, Visit_ID, Test_Name, Result_Value, Normal_Range, Test_Date)
    VALUES (Lab_Result_SEQ.NEXTVAL, p_Visit_ID, p_Test_Name, p_Result_Value, p_Normal_Range, p_Test_Date);
    
    COMMIT;
END;
/

-- Trigger to prevent duplicate allergy records
CREATE OR REPLACE TRIGGER prevent_duplicate_allergy
BEFORE INSERT ON Allergies
FOR EACH ROW
DECLARE
    v_exists NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_exists
    FROM Allergies
    WHERE Patient_ID = :NEW.Patient_ID AND LOWER(Allergen) = LOWER(:NEW.Allergen);
    
    IF v_exists > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Duplicate allergy for this patient');
    END IF;
END;
/


-- Inserts in patients table
INSERT INTO Patients (Patient_ID, Name, DOB, Gender, Contact, Address, Blood_Type, Insurance_ID) 
VALUES (1, 'Sita Sharma', TO_DATE('2012-04-12', 'YYYY-MM-DD'), 'Female', '9812345678', 'Kathmandu', 'A+', 1);

INSERT INTO Patients (Patient_ID, Name, DOB, Gender, Contact, Address, Blood_Type, Insurance_ID) 
VALUES (2, 'Ram Thapa', TO_DATE('2010-08-05', 'YYYY-MM-DD'), 'Male', '9807654321', 'Pokhara', 'B+', 2);

INSERT INTO Patients (Patient_ID, Name, DOB, Gender, Contact, Address, Blood_Type, Insurance_ID) 
VALUES (3, 'Bina Tamang', TO_DATE('2011-11-30', 'YYYY-MM-DD'), 'Female', '9841122334', 'Biratnagar', 'O+', 3);

INSERT INTO Patients (Patient_ID, Name, DOB, Gender, Contact, Address, Blood_Type, Insurance_ID) 
VALUES (4, 'Kiran Rai', TO_DATE('2013-01-19', 'YYYY-MM-DD'), 'Other', '9867894561', 'Chitwan', 'AB-', 1);

INSERT INTO Patients (Patient_ID, Name, DOB, Gender, Contact, Address, Blood_Type, Insurance_ID) 
VALUES (5, 'Suman Gurung', TO_DATE('2014-06-10', 'YYYY-MM-DD'), 'Male', '9823456712', 'Butwal', 'O-', 4);

-- Inserts in Insurance_Providers table
INSERT INTO Insurance_Providers (Insurance_ID, Name, Coverage) 
VALUES (1, 'Nepal Life Insurance', 'Basic');

INSERT INTO Insurance_Providers (Insurance_ID, Name, Coverage) 
VALUES (2, 'IME General Insurance', 'Comprehensive');

INSERT INTO Insurance_Providers (Insurance_ID, Name, Coverage) 
VALUES (3, 'Himalayan Everest Insurance', 'Premium');

INSERT INTO Insurance_Providers (Insurance_ID, Name, Coverage) 
VALUES (4, 'Shikhar Insurance', 'Basic');

INSERT INTO Insurance_Providers (Insurance_ID, Name, Coverage) 
VALUES (5, 'Sagarmatha Insurance', 'Premium');

-- Inserts in Medications table
INSERT INTO Medications (Medicine_ID, Name, Type, Manufacturer) 
VALUES (1, 'Paracetamol', 'Antipyretic', 'Deurali-Janta');

INSERT INTO Medications (Medicine_ID, Name, Type, Manufacturer) 
VALUES (2, 'Amoxicillin', 'Antibiotic', 'Asian Pharmaceuticals');

INSERT INTO Medications (Medicine_ID, Name, Type, Manufacturer) 
VALUES (3, 'Ciprofloxacin', 'Antibiotic', 'Omnica Labs');

INSERT INTO Medications (Medicine_ID, Name, Type, Manufacturer) 
VALUES (4, 'Cetirizine', 'Antihistamine', 'Nepal Pharma');

INSERT INTO Medications (Medicine_ID, Name, Type, Manufacturer) 
VALUES (5, 'Ibuprofen', 'Analgesic', 'Chemidrug Industries');

-- Inserts in Visits table
INSERT INTO Visits (Visit_ID, Patient_ID, Visit_Date, Doctor_ID, Reason, Notes) 
VALUES (1, 1, TO_DATE('2024-05-10', 'YYYY-MM-DD'), 101, 'Cough', 'Prescribed antibiotics and rest.');

INSERT INTO Visits (Visit_ID, Patient_ID, Visit_Date, Doctor_ID, Reason, Notes) 
VALUES (2, 2, TO_DATE('2024-03-22', 'YYYY-MM-DD'), 103, 'Checkup', 'Routine school checkup.');

INSERT INTO Visits (Visit_ID, Patient_ID, Visit_Date, Doctor_ID, Reason, Notes) 
VALUES (3, 3, TO_DATE('2024-02-14', 'YYYY-MM-DD'), 104, 'Fever', 'Prescribed paracetamol.');

INSERT INTO Visits (Visit_ID, Patient_ID, Visit_Date, Doctor_ID, Reason, Notes) 
VALUES (4, 1, TO_DATE('2024-06-01', 'YYYY-MM-DD'), 105, 'Injury', 'Minor wound cleaned and bandaged.');

INSERT INTO Visits (Visit_ID, Patient_ID, Visit_Date, Doctor_ID, Reason, Notes) 
VALUES (5, 5, TO_DATE('2024-01-10', 'YYYY-MM-DD'), 102, 'Vaccination', 'MMR vaccine dose 2 administered.');


-- Inserts into Lab_Results
INSERT INTO Lab_Results (Result_ID, Visit_ID, Test_Name, Result_Value, Normal_Range, Test_Date) 
VALUES (1, 1, 'CBC', 5.2, '4.5-6.5', TO_DATE('2024-05-11', 'YYYY-MM-DD'));

INSERT INTO Lab_Results (Result_ID, Visit_ID, Test_Name, Result_Value, Normal_Range, Test_Date) 
VALUES (2, 3, 'Glucose', 6.1, '3.5-5.5', TO_DATE('2024-02-15', 'YYYY-MM-DD'));

INSERT INTO Lab_Results (Result_ID, Visit_ID, Test_Name, Result_Value, Normal_Range, Test_Date) 
VALUES (3, 2, 'Cholesterol', 5.8, '3.0-5.0', TO_DATE('2024-03-23', 'YYYY-MM-DD'));

INSERT INTO Lab_Results (Result_ID, Visit_ID, Test_Name, Result_Value, Normal_Range, Test_Date) 
VALUES (4, 4, 'Uric Acid', 7.0, '3.5-7.0', TO_DATE('2024-06-02', 'YYYY-MM-DD'));

INSERT INTO Lab_Results (Result_ID, Visit_ID, Test_Name, Result_Value, Normal_Range, Test_Date) 
VALUES (5, 5, 'Liver Function', 6.0, '5.0-7.0', TO_DATE('2024-01-11', 'YYYY-MM-DD'));

DROP TABLE Inventory CASCADE CONSTRAINTS PURGE;

-- Inserts into Prescriptions
INSERT INTO Prescriptions (Prescription_ID, Visit_ID, Medicine_ID, Dosage, Frequency, Start_Date, End_Date) 
VALUES (1, 1, 2, '500mg', 'Twice a day', TO_DATE('2024-05-10', 'YYYY-MM-DD'), TO_DATE('2024-05-15', 'YYYY-MM-DD'));

INSERT INTO Prescriptions (Prescription_ID, Visit_ID, Medicine_ID, Dosage, Frequency, Start_Date, End_Date) 
VALUES (2, 3, 1, '250mg', 'Thrice a day', TO_DATE('2024-02-14', 'YYYY-MM-DD'), TO_DATE('2024-02-19', 'YYYY-MM-DD'));

INSERT INTO Prescriptions (Prescription_ID, Visit_ID, Medicine_ID, Dosage, Frequency, Start_Date, End_Date) 
VALUES (3, 4, 5, '400mg', 'Once a day', TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-06-05', 'YYYY-MM-DD'));

INSERT INTO Prescriptions (Prescription_ID, Visit_ID, Medicine_ID, Dosage, Frequency, Start_Date, End_Date) 
VALUES (4, 2, 3, '500mg', 'Twice a day', TO_DATE('2024-03-22', 'YYYY-MM-DD'), TO_DATE('2024-03-27', 'YYYY-MM-DD'));

INSERT INTO Prescriptions (Prescription_ID, Visit_ID, Medicine_ID, Dosage, Frequency, Start_Date, End_Date) 
VALUES (5, 5, 4, '5ml', 'Once daily', TO_DATE('2024-01-10', 'YYYY-MM-DD'), TO_DATE('2024-01-15', 'YYYY-MM-DD'));

-- Inserts into Allergies
INSERT INTO Allergies (Allergy_ID, Patient_ID, Allergen, Severity, Notes) 
VALUES (1, 1, 'Peanuts', 'Moderate', 'Reaction since early childhood');

INSERT INTO Allergies (Allergy_ID, Patient_ID, Allergen, Severity, Notes) 
VALUES (2, 3, 'Dust', 'Mild', 'Seasonal sneezing and runny nose');

INSERT INTO Allergies (Allergy_ID, Patient_ID, Allergen, Severity, Notes) 
VALUES (3, 2, 'Penicillin', 'Severe', 'Causes rashes and swelling');

INSERT INTO Allergies (Allergy_ID, Patient_ID, Allergen, Severity, Notes) 
VALUES (4, 5, 'Pollen', 'Mild', 'Observed in spring');

INSERT INTO Allergies (Allergy_ID, Patient_ID, Allergen, Severity, Notes) 
VALUES (5, 4, 'Latex', 'Moderate', 'Developed during surgery prep');

-- Inserts into Vaccinations
INSERT INTO Vaccinations (Vaccine_ID, Patient_ID, Vaccine_Name, Dose_Number, Administered_Date) 
VALUES (1, 1, 'MMR', 1, TO_DATE('2024-01-10', 'YYYY-MM-DD'));

INSERT INTO Vaccinations (Vaccine_ID, Patient_ID, Vaccine_Name, Dose_Number, Administered_Date) 
VALUES (2, 1, 'Polio', 3, TO_DATE('2024-01-20', 'YYYY-MM-DD'));

INSERT INTO Vaccinations (Vaccine_ID, Patient_ID, Vaccine_Name, Dose_Number, Administered_Date) 
VALUES (3, 2, 'Typhoid', 1, TO_DATE('2024-02-18', 'YYYY-MM-DD'));

INSERT INTO Vaccinations (Vaccine_ID, Patient_ID, Vaccine_Name, Dose_Number, Administered_Date) 
VALUES (4, 3, 'Hepatitis B', 2, TO_DATE('2024-03-05', 'YYYY-MM-DD'));

INSERT INTO Vaccinations (Vaccine_ID, Patient_ID, Vaccine_Name, Dose_Number, Administered_Date) 
VALUES (5, 4, 'COVID-19', 1, TO_DATE('2024-06-10', 'YYYY-MM-DD'));

-- Inserts into Hospital
INSERT INTO Hospitals (Hospital_ID, Name, Address, Contact) VALUES
(1, 'Teaching Hospital', 'Maharajgunj, Kathmandu', '014410000'),
(2, 'Norvic International', 'Thapathali, Kathmandu', '014250000'),
(3, 'Gandaki Hospital', 'Pokhara', '061540000');

-- Inserts into Department
INSERT INTO Departments (Department_ID, Name, Hospital_ID) VALUES
(1, 'Outpatient', 1),
(2, 'Child Health', 2),
(3, 'Cardiac', 3),
(4, 'ENT', 1),
(5, 'Skin', 2),
(6, 'Bones', 3),
(7, 'Brain', 1),
(8, 'Internal', 2),
(9, 'Mental Health', 3),
(10, 'Primary Care', 1);


-- Inserts into Doctors
INSERT INTO Doctors (Doctor_ID, Name, Specialization, Contact, Email, Experience_Years, Availability, Department_ID) VALUES
(101, 'Dr. General A', 'General Physician', '9801566502', 'dra@teaching.com', 7, 'Mon-Fri 9AM–5PM', 1),
(102, 'Dr. Pediatrics B', 'Pediatrics', '9801205602', 'drb@norvic.com', 5, 'Mon-Fri 9AM–5PM', 2),
(103, 'Dr. Cardiology C', 'Cardiology', '9801843254', 'drc@gandaki.com', 5, 'Mon-Fri 9AM–5PM', 3),
(104, 'Dr. ENT D', 'ENT', '9801391093', 'drd@teaching.com', 10, 'Mon-Fri 9AM–5PM', 4),
(105, 'Dr. Dermatology E', 'Dermatology', '9801170421', 'dre@norvic.com', 19, 'Mon-Fri 9AM–5PM', 5);


INSERT INTO Doctors (Doctor_ID, Name, Specialization, Contact, Email, Experience_Years, Availability, Department_ID)
VALUES (112, 'Dr. Alisha Mahat', 'Gastroenterology', '9801666222', 'amahat@norvic.com', 8, 'Mon-Fri 10AM–4PM', 2);



CREATE TABLE Patients (
    Patient_ID NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    DOB DATE,
    Gender VARCHAR2(10),
    Contact VARCHAR2(20),
    Address VARCHAR2(200),
    Blood_Type VARCHAR2(5),
    Insurance_ID NUMBER
);

CREATE TABLE Visits (
    Visit_ID NUMBER PRIMARY KEY,
    Patient_ID NUMBER REFERENCES Patients(Patient_ID),
    Visit_Date DATE,
    Doctor_ID NUMBER,
    Reason VARCHAR2(200),
    Notes CLOB
);

CREATE TABLE Lab_Results (
    Result_ID NUMBER,
    Visit_ID NUMBER,
    Test_Name VARCHAR2(100),
    Result_Value NUMBER,
    Normal_Range VARCHAR2(50),
    Test_Date DATE
)
PARTITION BY RANGE (Test_Date) (
    PARTITION p2022 VALUES LESS THAN (TO_DATE('2023-01-01','YYYY-MM-DD')),
    PARTITION p2023 VALUES LESS THAN (TO_DATE('2024-01-01','YYYY-MM-DD')),
    PARTITION p2024 VALUES LESS THAN (TO_DATE('2025-01-01','YYYY-MM-DD')),
    PARTITION pmax VALUES LESS THAN (MAXVALUE)
);


CREATE TABLE Prescriptions (
    Prescription_ID NUMBER PRIMARY KEY,
    Visit_ID NUMBER REFERENCES Visits(Visit_ID),
    Medicine_ID NUMBER REFERENCES Medications(Medicine_ID),
    Dosage VARCHAR2(50),
    Frequency VARCHAR2(50),
    Start_Date DATE,
    End_Date DATE
);

CREATE TABLE Allergies (
    Allergy_ID NUMBER PRIMARY KEY,
    Patient_ID NUMBER REFERENCES Patients(Patient_ID),
    Allergen VARCHAR2(100),
    Severity VARCHAR2(20),
    Notes VARCHAR2(200)
);

CREATE TABLE Vaccinations (
    Vaccine_ID NUMBER PRIMARY KEY,
    Patient_ID NUMBER REFERENCES Patients(Patient_ID),
    Vaccine_Name VARCHAR2(100),
    Dose_Number NUMBER,
    Administered_Date DATE
);

CREATE TABLE Insurance_Providers (
    Insurance_ID NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    Coverage VARCHAR2(200)
);

CREATE TABLE Medications (
    Medicine_ID NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    Type VARCHAR2(50),
    Manufacturer VARCHAR2(100)
);

-- Optional
CREATE TABLE Doctors (
    Doctor_ID        NUMBER PRIMARY KEY,
    Name             VARCHAR2(100) NOT NULL,
    Specialization   VARCHAR2(100),
    Contact          VARCHAR2(20),
    Email            VARCHAR2(100),
    Experience_Years NUMBER,
    Availability     VARCHAR2(50),
    Department_ID    NUMBER,
    FOREIGN KEY (Department_ID) REFERENCES Departments(Department_ID)
);


ALTER TABLE Visits
ADD CONSTRAINT fk_visit_doctor
FOREIGN KEY (Doctor_ID)
REFERENCES Doctors(Doctor_ID);

CREATE TABLE Departments (
    Department_ID   NUMBER PRIMARY KEY,
    Name            VARCHAR2(100) NOT NULL,
    Hospital_ID     NUMBER,
    FOREIGN KEY (Hospital_ID) REFERENCES Hospitals(Hospital_ID)
);
CREATE TABLE Hospitals (
    Hospital_ID     NUMBER PRIMARY KEY,
    Name            VARCHAR2(100) NOT NULL,
    Address         VARCHAR2(150),
    Contact         VARCHAR2(20)
);





-- Patients with abnormal lab results in the last 3 months
WITH Parsed_Lab_Results AS (
  SELECT
    l.Result_ID,
    l.Visit_ID,
    l.Test_Name,
    TO_NUMBER(l.Result_Value) AS Result_Value,
    TO_NUMBER(REGEXP_SUBSTR(l.Normal_Range, '^\d+(\.\d+)?')) AS min_val,
    TO_NUMBER(REGEXP_SUBSTR(l.Normal_Range, '\d+(\.\d+)?$')) AS max_val,
    l.Test_Date,
    v.Patient_ID
  FROM Lab_Results l
  JOIN Visits v ON l.Visit_ID = v.Visit_ID
  WHERE l.Test_Date >= ADD_MONTHS(
      (SELECT MAX(Test_Date) FROM Lab_Results),
      -3
    )
),
is_abnormal AS(
    SELECT
  p.Patient_ID,
  p.Name AS Patient_Name,
  plr.Test_Name,
  plr.Result_Value,
  plr.min_val,
  plr.max_val,
  plr.Test_Date,
  CASE
    WHEN plr.min_val IS NOT NULL AND plr.max_val IS NOT NULL AND
         (plr.Result_Value < plr.min_val OR plr.Result_Value > plr.max_val)
    THEN 1
    ELSE 0
  END AS is_abnormal
FROM Parsed_Lab_Results plr
JOIN Patients p ON plr.Patient_ID = p.Patient_ID)
SELECT * FROM is_abnormal isab WHERE isab.is_abnormal = 1;


-- List of medications prescribed by each doctor.
SELECT 
    d.Doctor_ID,
    d.Name AS Doctor_Name,
    d.Specialization,
    m.Name AS Medicine_Name,
    COUNT(*) AS Times_Prescribed
FROM Doctors d
JOIN Visits v ON d.Doctor_ID = v.Doctor_ID
JOIN Prescriptions p ON v.Visit_ID = p.Visit_ID
JOIN Medications m ON p.Medicine_ID = m.Medicine_ID
GROUP BY d.Doctor_ID, d.Name, d.Specialization, m.Name
ORDER BY d.Doctor_ID, Times_Prescribed DESC;

-- Patients with known allergies to prescribed medications.
SELECT DISTINCT pa.Patient_ID, pa.Name, m.Name AS Medication
FROM Prescriptions pr
JOIN Visits v ON pr.Visit_ID = v.Visit_ID
JOIN Patients pa ON v.Patient_ID = pa.Patient_ID
JOIN Medications m ON pr.Medicine_ID = m.Medicine_ID
JOIN Allergies a ON a.Patient_ID = pa.Patient_ID
WHERE LOWER(a.Allergen) LIKE '%' || LOWER(m.Name) || '%';

-- Vaccination history for patients under age 12
SELECT p.Patient_ID, p.Name, v.Vaccine_Name, v.Administered_Date
FROM Patients p
JOIN Vaccinations v ON p.Patient_ID = v.Patient_ID
WHERE MONTHS_BETWEEN(SYSDATE, p.DOB) < 12 * 12;





Assignment
Problem Statement:

Design an Electronic Health Records System to manage patient records, clinical encounters, test results, prescriptions, allergies, and vaccination history. Focus on data security, integrity, and quick access to longitudinal patient data.

📝 Schema Design

Main Tables:
• Patients (Patient_ID, Name, DOB, Gender, Contact, Address, Blood_Type, Insurance_ID)
• Visits (Visit_ID, Patient_ID, Visit_Date, Doctor_ID, Reason, Notes)
• Lab_Results (Result_ID, Visit_ID, Test_Name, Result_Value, Normal_Range, Test_Date)
• Prescriptions (Prescription_ID, Visit_ID, Medicine_ID, Dosage, Frequency, Start_Date, End_Date)
• Allergies (Allergy_ID, Patient_ID, Allergen, Severity, Notes)
• Vaccinations (Vaccine_ID, Patient_ID, Vaccine_Name, Dose_Number, Administered_Date)

Reference Tables:
• Insurance_Providers (Insurance_ID, Name, Coverage)
• Medications (Medicine_ID, Name, Type, Manufacturer)

✅ SQL Queries:

• Patients with abnormal lab results in the last 3 months.
• List of medications prescribed by each doctor.
• Patients with known allergies to prescribed medications.
• Vaccination history for patients under age 12.
• Patients missing required vaccinations.
• Lab test trends (e.g., increasing cholesterol over time).

✅ PL/SQL Logic:

• Procedure to add a lab result with validation.
• Trigger to prevent duplicate allergy records.
• Function to retrieve patient summary (diagnoses, meds, labs).
• Exception handling for invalid dosage or test inputs.

✅ Performance:

• Index on Patient_ID, Visit_Date, Test_Name
• Partition Lab_Results by year
• Materialized view for patient history snapshot

Expected Outcome:
✔ Well-designed relational database schema with normalized tables.
✔ Efficient SQL queries covering real-world e-commerce scenarios.
✔ PL/SQL procedures, triggers, and exception handling for business logic implementation.
✔ Performance optimization techniques applied for improved query execution.
✔ Clean, well-documented SQL scripts.
📅 Submission Guidelines:
📌 Submit a SQL script file (.sql) containing:
Table creation scripts.
Data insertion scripts.
SQL queries with their expected outputs.
📌 Submit a PL/SQL script file (.sql) containing:
Procedures, functions, and triggers.
📌 Submit a Performance Report (PDF/Word) explaining:
Query optimization techniques used.
Indexing and partitioning strategies.
Any performance improvements applied.
📌 Presentation
🎯 Evaluation Criteria:
Category
Weightage
Database Design & Normalization
20%
Correctness of SQL Queries
25%
PL/SQL Implementation (Procedures, Triggers, Exception Handling)
30%
Performance Optimization Techniques
15%
Code Readability & Documentation
10%
